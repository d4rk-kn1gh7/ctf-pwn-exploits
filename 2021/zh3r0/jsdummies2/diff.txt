diff --git a/.gitattributes b/.gitattributes
deleted file mode 100644
index 46fe0b3..0000000
--- a/.gitattributes
+++ /dev/null
@@ -1,7 +0,0 @@
-# Define macro for whitespace settings:
-[attr]tabs	whitespace=trailing-space,space-before-tab,indent-with-non-tab
-
-*		text=auto
-Makefile	tabs
-*.[ch]		tabs
-*.js		tabs
diff --git a/.gitignore b/.gitignore
deleted file mode 100644
index a90efe4..0000000
--- a/.gitignore
+++ /dev/null
@@ -1,12 +0,0 @@
-# Optional testsuites
-tests
-specs
-
-# Generated files:
-build
-tags
-
-# Editor settings:
-user.make
-.exrc
-.vimrc
diff --git a/AUTHORS b/AUTHORS
old mode 100644
new mode 100755
diff --git a/COPYING b/COPYING
old mode 100644
new mode 100755
diff --git a/Makefile b/Makefile
old mode 100644
new mode 100755
diff --git a/README b/README
old mode 100644
new mode 100755
diff --git a/astnames.h b/astnames.h
old mode 100644
new mode 100755
diff --git a/docs/examples.html b/docs/examples.html
old mode 100644
new mode 100755
diff --git a/docs/index.html b/docs/index.html
old mode 100644
new mode 100755
diff --git a/docs/introduction.html b/docs/introduction.html
old mode 100644
new mode 100755
diff --git a/docs/license.html b/docs/license.html
old mode 100644
new mode 100755
diff --git a/docs/logo.ps b/docs/logo.ps
old mode 100644
new mode 100755
diff --git a/docs/mujs-logo.png b/docs/mujs-logo.png
old mode 100644
new mode 100755
diff --git a/docs/reference.html b/docs/reference.html
old mode 100644
new mode 100755
diff --git a/docs/style.css b/docs/style.css
old mode 100644
new mode 100755
diff --git a/jsarray.c b/jsarray.c
old mode 100644
new mode 100755
diff --git a/jsboolean.c b/jsboolean.c
old mode 100644
new mode 100755
diff --git a/jsbuiltin.c b/jsbuiltin.c
old mode 100644
new mode 100755
index 76a5f68..9692cb0
--- a/jsbuiltin.c
+++ b/jsbuiltin.c
@@ -201,6 +201,11 @@ void jsB_init(js_State *J)
 	J->String_prototype = jsV_newobject(J, JS_CSTRING, J->Object_prototype);
 	J->Date_prototype = jsV_newobject(J, JS_CDATE, J->Object_prototype);
 
+	/* ------------------------------------------------------------------------------ */
+	J->Uint32Array_prototype = jsV_newobject(J, JS_CUINT32ARRAY, J->Object_prototype);
+	J->ArrayBuffer_prototype = jsV_newobject(J, JS_CARRAYBUFFER, J->Object_prototype);
+	/* ------------------------------------------------------------------------------- */
+
 	J->RegExp_prototype = jsV_newobject(J, JS_CREGEXP, J->Object_prototype);
 	J->RegExp_prototype->u.r.prog = js_regcompx(J->alloc, J->actx, "(?:)", 0, NULL);
 	J->RegExp_prototype->u.r.source = js_strdup(J, "(?:)");
@@ -226,6 +231,8 @@ void jsB_init(js_State *J)
 	jsB_initerror(J);
 	jsB_initmath(J);
 	jsB_initjson(J);
+	jsB_initUint32Array(J);
+	jsB_initArrayBuffer(J);
 
 	/* Initialize the global object */
 	js_pushnumber(J, NAN);
diff --git a/jsbuiltin.h b/jsbuiltin.h
old mode 100644
new mode 100755
index a96d3be..fd76eb6
--- a/jsbuiltin.h
+++ b/jsbuiltin.h
@@ -13,6 +13,8 @@ void jsB_initerror(js_State *J);
 void jsB_initmath(js_State *J);
 void jsB_initjson(js_State *J);
 void jsB_initdate(js_State *J);
+void jsB_initUint32Array(js_State* J);
+void jsB_initArrayBuffer(js_State* J);
 
 void jsB_propf(js_State *J, const char *name, js_CFunction cfun, int n);
 void jsB_propn(js_State *J, const char *name, double number);
diff --git a/jscompile.c b/jscompile.c
old mode 100644
new mode 100755
diff --git a/jscompile.h b/jscompile.h
old mode 100644
new mode 100755
diff --git a/jsdate.c b/jsdate.c
old mode 100644
new mode 100755
diff --git a/jsdtoa.c b/jsdtoa.c
old mode 100644
new mode 100755
diff --git a/jsdump.c b/jsdump.c
old mode 100644
new mode 100755
diff --git a/jserror.c b/jserror.c
old mode 100644
new mode 100755
diff --git a/jsfunction.c b/jsfunction.c
old mode 100644
new mode 100755
diff --git a/jsgc.c b/jsgc.c
old mode 100644
new mode 100755
index 3b65bdf..6ba56de
--- a/jsgc.c
+++ b/jsgc.c
@@ -46,6 +46,9 @@ static void jsG_freeobject(js_State *J, js_Object *obj)
 		jsG_freeiterator(J, obj->u.iter.head);
 	if (obj->type == JS_CUSERDATA && obj->u.user.finalize)
 		obj->u.user.finalize(J, obj->u.user.data);
+	if( obj->type == JS_CUINT32ARRAY ) {
+		js_free(J, (void*)obj->u.ta.mem);
+	}
 	js_free(J, obj);
 }
 
@@ -160,6 +163,9 @@ void js_gc(js_State *J, int report)
 	jsG_markobject(J, mark, J->TypeError_prototype);
 	jsG_markobject(J, mark, J->URIError_prototype);
 
+	jsG_markobject(J, mark, J->Uint32Array_prototype);
+	jsG_markobject(J, mark, J->Array_prototype);
+
 	jsG_markobject(J, mark, J->R);
 	jsG_markobject(J, mark, J->G);
 
diff --git a/jsi.h b/jsi.h
old mode 100644
new mode 100755
index 59dcfbf..13a04fc
--- a/jsi.h
+++ b/jsi.h
@@ -18,7 +18,6 @@
 #pragma warning(disable:4996) /* _CRT_SECURE_NO_WARNINGS */
 #pragma warning(disable:4244) /* implicit conversion from double to int */
 #pragma warning(disable:4267) /* implicit conversion of int to smaller int */
-#pragma warning(disable:4090) /* broken const warnings */
 #define inline __inline
 #if _MSC_VER < 1900 /* MSVC 2015 */
 #define snprintf jsW_snprintf
@@ -220,7 +219,9 @@ struct js_State
 	js_Object *String_prototype;
 	js_Object *RegExp_prototype;
 	js_Object *Date_prototype;
-
+	js_Object* Uint32Array_prototype;
+	js_Object* ArrayBuffer_prototype;
+	
 	js_Object *Error_prototype;
 	js_Object *EvalError_prototype;
 	js_Object *RangeError_prototype;
diff --git a/jsintern.c b/jsintern.c
old mode 100644
new mode 100755
diff --git a/jslex.c b/jslex.c
old mode 100644
new mode 100755
diff --git a/jslex.h b/jslex.h
old mode 100644
new mode 100755
diff --git a/jsmath.c b/jsmath.c
old mode 100644
new mode 100755
diff --git a/jsnumber.c b/jsnumber.c
old mode 100644
new mode 100755
diff --git a/jsobject.c b/jsobject.c
old mode 100644
new mode 100755
index 23fb901..47f8e3c
--- a/jsobject.c
+++ b/jsobject.c
@@ -42,6 +42,8 @@ static void Op_toString(js_State *J)
 		case JS_CJSON: js_pushliteral(J, "[object JSON]"); break;
 		case JS_CARGUMENTS: js_pushliteral(J, "[object Arguments]"); break;
 		case JS_CITERATOR: js_pushliteral(J, "[object Iterator]"); break;
+		case JS_CUINT32ARRAY: js_pushliteral(J, "[object Uint32Array]"); break;		
+		case JS_CARRAYBUFFER: js_pushliteral(J, "[object ArrayBuffer]"); break;
 		case JS_CUSERDATA:
 			js_pushliteral(J, "[object ");
 			js_pushliteral(J, self->u.user.tag);
@@ -341,7 +343,6 @@ static void O_keys(js_State *J)
 	if (!js_isobject(J, 1))
 		js_typeerror(J, "not an object");
 	obj = js_toobject(J, 1);
-
 	js_newarray(J);
 
 	if (obj->properties->level)
diff --git a/json.c b/json.c
old mode 100644
new mode 100755
diff --git a/jsparse.c b/jsparse.c
old mode 100644
new mode 100755
diff --git a/jsparse.h b/jsparse.h
old mode 100644
new mode 100755
diff --git a/jsproperty.c b/jsproperty.c
old mode 100644
new mode 100755
index 292e8b5..af80963
--- a/jsproperty.c
+++ b/jsproperty.c
@@ -315,6 +315,7 @@ void jsV_resizearray(js_State *J, js_Object *obj, int newlen)
 	char buf[32];
 	const char *s;
 	int k;
+	// new len < initial len
 	if (newlen < obj->u.a.length) {
 		if (obj->u.a.length > obj->count * 2) {
 			js_Object *it = jsV_newiterator(J, obj, 1);
diff --git a/jsregexp.c b/jsregexp.c
old mode 100644
new mode 100755
diff --git a/jsrepr.c b/jsrepr.c
old mode 100644
new mode 100755
diff --git a/jsrun.c b/jsrun.c
old mode 100644
new mode 100755
diff --git a/jsrun.h b/jsrun.h
old mode 100644
new mode 100755
diff --git a/jsstate.c b/jsstate.c
old mode 100644
new mode 100755
diff --git a/jsstring.c b/jsstring.c
old mode 100644
new mode 100755
diff --git a/jsvalue.c b/jsvalue.c
old mode 100644
new mode 100755
diff --git a/jsvalue.h b/jsvalue.h
old mode 100644
new mode 100755
index dbb7b4b..233a4f4
--- a/jsvalue.h
+++ b/jsvalue.h
@@ -1,8 +1,11 @@
 #ifndef js_value_h
 #define js_value_h
+#include <stdint.h>
 
 typedef struct js_Property js_Property;
 typedef struct js_Iterator js_Iterator;
+typedef struct js_TypedArray js_TypedArray;
+typedef struct js_ArrayBuffer js_ArrayBuffer;
 
 /* Hint to ToPrimitive() */
 enum {
@@ -39,8 +42,9 @@ enum js_Class {
 	JS_CARGUMENTS,
 	JS_CITERATOR,
 	JS_CUSERDATA,
+	JS_CUINT32ARRAY,
+	JS_CARRAYBUFFER
 };
-
 /*
 	Short strings abuse the js_Value struct. By putting the type tag in the
 	last byte, and using 0 as the tag for short strings, we can use the
@@ -77,6 +81,18 @@ struct js_Regexp
 	unsigned short last;
 };
 
+struct js_ArrayBuffer
+{
+	uint8_t* backingStore;
+	size_t byteLength;
+};
+
+struct js_TypedArray
+{
+	uint8_t* mem;
+	size_t length;
+};
+
 struct js_Object
 {
 	enum js_Class type;
@@ -117,6 +133,8 @@ struct js_Object
 			js_Delete delete;
 			js_Finalize finalize;
 		} user;
+		js_ArrayBuffer ab;
+		js_TypedArray ta;
 	} u;
 	js_Object *gcnext; /* allocation list */
 	js_Object *gcroot; /* scan list */
diff --git a/main.c b/main.c
old mode 100644
new mode 100755
index bbc5f2f..a3d27e7
--- a/main.c
+++ b/main.c
@@ -96,18 +96,6 @@ static void jsB_gc(js_State *J)
 	js_pushundefined(J);
 }
 
-static void jsB_load(js_State *J)
-{
-	int i, n = js_gettop(J);
-	for (i = 1; i < n; ++i) {
-		js_loadfile(J, js_tostring(J, i));
-		js_pushundefined(J);
-		js_call(J, 0);
-		js_pop(J, 1);
-	}
-	js_pushundefined(J);
-}
-
 static void jsB_compile(js_State *J)
 {
 	const char *source = js_tostring(J, 1);
@@ -138,66 +126,6 @@ static void jsB_write(js_State *J)
 	js_pushundefined(J);
 }
 
-static void jsB_read(js_State *J)
-{
-	const char *filename = js_tostring(J, 1);
-	FILE *f;
-	char *s;
-	int n, t;
-
-	f = fopen(filename, "rb");
-	if (!f) {
-		js_error(J, "cannot open file '%s': %s", filename, strerror(errno));
-	}
-
-	if (fseek(f, 0, SEEK_END) < 0) {
-		fclose(f);
-		js_error(J, "cannot seek in file '%s': %s", filename, strerror(errno));
-	}
-
-	n = ftell(f);
-	if (n < 0) {
-		fclose(f);
-		js_error(J, "cannot tell in file '%s': %s", filename, strerror(errno));
-	}
-
-	if (fseek(f, 0, SEEK_SET) < 0) {
-		fclose(f);
-		js_error(J, "cannot seek in file '%s': %s", filename, strerror(errno));
-	}
-
-	s = malloc(n + 1);
-	if (!s) {
-		fclose(f);
-		js_error(J, "out of memory");
-	}
-
-	t = fread(s, 1, n, f);
-	if (t != n) {
-		free(s);
-		fclose(f);
-		js_error(J, "cannot read data from file '%s': %s", filename, strerror(errno));
-	}
-	s[n] = 0;
-
-	js_pushstring(J, s);
-	free(s);
-	fclose(f);
-}
-
-static void jsB_readline(js_State *J)
-{
-	char *line = readline("");
-	if (!line) {
-		js_pushnull(J);
-		return;
-	}
-	js_pushstring(J, line);
-	if (*line)
-		add_history(line);
-	free(line);
-}
-
 static void jsB_quit(js_State *J)
 {
 	exit(js_tonumber(J, 1));
@@ -311,9 +239,6 @@ main(int argc, char **argv)
 	js_newcfunction(J, jsB_gc, "gc", 0);
 	js_setglobal(J, "gc");
 
-	js_newcfunction(J, jsB_load, "load", 1);
-	js_setglobal(J, "load");
-
 	js_newcfunction(J, jsB_compile, "compile", 2);
 	js_setglobal(J, "compile");
 
@@ -323,12 +248,6 @@ main(int argc, char **argv)
 	js_newcfunction(J, jsB_write, "write", 0);
 	js_setglobal(J, "write");
 
-	js_newcfunction(J, jsB_read, "read", 1);
-	js_setglobal(J, "read");
-
-	js_newcfunction(J, jsB_readline, "readline", 0);
-	js_setglobal(J, "readline");
-
 	js_newcfunction(J, jsB_repr, "repr", 0);
 	js_setglobal(J, "repr");
 
diff --git a/mujs.h b/mujs.h
old mode 100644
new mode 100755
diff --git a/one.c b/one.c
old mode 100644
new mode 100755
index 3eebe08..8af6986
--- a/one.c
+++ b/one.c
@@ -1,4 +1,6 @@
+#include "jsUint32Array.c"
 #include "jsarray.c"
+#include "jsarraybuffer.c"
 #include "jsboolean.c"
 #include "jsbuiltin.c"
 #include "jscompile.c"
diff --git a/opnames.h b/opnames.h
old mode 100644
new mode 100755
diff --git a/pp.c b/pp.c
old mode 100644
new mode 100755
diff --git a/regexp.c b/regexp.c
old mode 100644
new mode 100755
diff --git a/regexp.h b/regexp.h
old mode 100644
new mode 100755
diff --git a/tools/test262-harness.js b/tools/test262-harness.js
old mode 100644
new mode 100755
diff --git a/utf.c b/utf.c
old mode 100644
new mode 100755
diff --git a/utf.h b/utf.h
old mode 100644
new mode 100755
diff --git a/utftype.c b/utftype.c
old mode 100644
new mode 100755
